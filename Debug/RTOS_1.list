
RTOS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006190  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08006320  08006320  00016320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006540  08006540  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006540  08006540  00016540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006548  08006548  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006548  08006548  00016548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800654c  0800654c  0001654c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010c8  20000074  080065c4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000113c  080065c4  0002113c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b88  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000319d  00000000  00000000  00038c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  0003bdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  0003d1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289f5  00000000  00000000  0003e4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b92  00000000  00000000  00066ead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc6dd  00000000  00000000  0007da3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017a11c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e0  00000000  00000000  0017a16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006308 	.word	0x08006308

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006308 	.word	0x08006308

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <vApplicationGetIdleTaskMemory+0x30>)
 80004fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000090 	.word	0x20000090
 8000514:	20000144 	.word	0x20000144

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b5b0      	push	{r4, r5, r7, lr}
 800051a:	b098      	sub	sp, #96	; 0x60
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fbd4 	bl	8000cca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f859 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f8d9 	bl	80006dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052a:	f000 f8a7 	bl	800067c <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinarySem */
  osSemaphoreDef(BinarySem);
 800052e:	2300      	movs	r3, #0
 8000530:	65bb      	str	r3, [r7, #88]	; 0x58
 8000532:	2300      	movs	r3, #0
 8000534:	65fb      	str	r3, [r7, #92]	; 0x5c
  BinarySemHandle = osSemaphoreCreate(osSemaphore(BinarySem), 1);
 8000536:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800053a:	2101      	movs	r1, #1
 800053c:	4618      	mov	r0, r3
 800053e:	f003 fab7 	bl	8003ab0 <osSemaphoreCreate>
 8000542:	4603      	mov	r3, r0
 8000544:	4a1d      	ldr	r2, [pc, #116]	; (80005bc <main+0xa4>)
 8000546:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of normalTask */
  osThreadDef(normalTask, StartNormalTask, osPriorityNormal, 0, 128);
 8000548:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <main+0xa8>)
 800054a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800054e:	461d      	mov	r5, r3
 8000550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000554:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000558:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  normalTaskHandle = osThreadCreate(osThread(normalTask), NULL);
 800055c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f003 fa44 	bl	80039f0 <osThreadCreate>
 8000568:	4603      	mov	r3, r0
 800056a:	4a16      	ldr	r2, [pc, #88]	; (80005c4 <main+0xac>)
 800056c:	6013      	str	r3, [r2, #0]

  /* definition and creation of HighTask */
  osThreadDef(HighTask, StartHighTask, osPriorityAboveNormal, 0, 128);
 800056e:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <main+0xb0>)
 8000570:	f107 0420 	add.w	r4, r7, #32
 8000574:	461d      	mov	r5, r3
 8000576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HighTaskHandle = osThreadCreate(osThread(HighTask), NULL);
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f003 fa31 	bl	80039f0 <osThreadCreate>
 800058e:	4603      	mov	r3, r0
 8000590:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <main+0xb4>)
 8000592:	6013      	str	r3, [r2, #0]

  /* definition and creation of LowTask */
  osThreadDef(LowTask, StartLowTask, osPriorityBelowNormal, 0, 128);
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <main+0xb8>)
 8000596:	1d3c      	adds	r4, r7, #4
 8000598:	461d      	mov	r5, r3
 800059a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LowTaskHandle = osThreadCreate(osThread(LowTask), NULL);
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f003 fa20 	bl	80039f0 <osThreadCreate>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a08      	ldr	r2, [pc, #32]	; (80005d4 <main+0xbc>)
 80005b4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b6:	f003 fa14 	bl	80039e2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <main+0xa2>
 80005bc:	200003d4 	.word	0x200003d4
 80005c0:	08006340 	.word	0x08006340
 80005c4:	200003c8 	.word	0x200003c8
 80005c8:	0800635c 	.word	0x0800635c
 80005cc:	200003cc 	.word	0x200003cc
 80005d0:	08006378 	.word	0x08006378
 80005d4:	200003d0 	.word	0x200003d0

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b096      	sub	sp, #88	; 0x58
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	2244      	movs	r2, #68	; 0x44
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f005 fdc4 	bl	8006174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	463b      	mov	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005fe:	f000 fe67 	bl	80012d0 <HAL_PWREx_ControlVoltageScaling>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000608:	f000 fa0c 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800060c:	2310      	movs	r3, #16
 800060e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000618:	2360      	movs	r3, #96	; 0x60
 800061a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	2302      	movs	r3, #2
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000620:	2301      	movs	r3, #1
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000624:	2301      	movs	r3, #1
 8000626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000628:	2328      	movs	r3, #40	; 0x28
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800062c:	2307      	movs	r3, #7
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fe9d 	bl	800137c <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000648:	f000 f9ec 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2303      	movs	r3, #3
 8000652:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000660:	463b      	mov	r3, r7
 8000662:	2104      	movs	r1, #4
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fa65 	bl	8001b34 <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000670:	f000 f9d8 	bl	8000a24 <Error_Handler>
  }
}
 8000674:	bf00      	nop
 8000676:	3758      	adds	r7, #88	; 0x58
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_USART2_UART_Init+0x58>)
 8000682:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <MX_USART2_UART_Init+0x5c>)
 8000684:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_USART2_UART_Init+0x58>)
 8000688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800068c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_USART2_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_USART2_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_USART2_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_USART2_UART_Init+0x58>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_USART2_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_USART2_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_USART2_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_USART2_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_USART2_UART_Init+0x58>)
 80006c0:	f002 fc1c 	bl	8002efc <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ca:	f000 f9ab 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000344 	.word	0x20000344
 80006d8:	40004400 	.word	0x40004400

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	4b2f      	ldr	r3, [pc, #188]	; (80007b0 <MX_GPIO_Init+0xd4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a2e      	ldr	r2, [pc, #184]	; (80007b0 <MX_GPIO_Init+0xd4>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b2c      	ldr	r3, [pc, #176]	; (80007b0 <MX_GPIO_Init+0xd4>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070a:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <MX_GPIO_Init+0xd4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a28      	ldr	r2, [pc, #160]	; (80007b0 <MX_GPIO_Init+0xd4>)
 8000710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <MX_GPIO_Init+0xd4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <MX_GPIO_Init+0xd4>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	4a22      	ldr	r2, [pc, #136]	; (80007b0 <MX_GPIO_Init+0xd4>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072e:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <MX_GPIO_Init+0xd4>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2110      	movs	r1, #16
 800073e:	481d      	ldr	r0, [pc, #116]	; (80007b4 <MX_GPIO_Init+0xd8>)
 8000740:	f000 fda0 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800074a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074e:	f000 fd99 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000752:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	4619      	mov	r1, r3
 8000766:	4813      	ldr	r0, [pc, #76]	; (80007b4 <MX_GPIO_Init+0xd8>)
 8000768:	f000 fbca 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 800076c:	2310      	movs	r3, #16
 800076e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4619      	mov	r1, r3
 8000782:	480c      	ldr	r0, [pc, #48]	; (80007b4 <MX_GPIO_Init+0xd8>)
 8000784:	f000 fbbc 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 8000788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	4619      	mov	r1, r3
 80007a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a4:	f000 fbac 	bl	8000f00 <HAL_GPIO_Init>

}
 80007a8:	bf00      	nop
 80007aa:	3720      	adds	r7, #32
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40021000 	.word	0x40021000
 80007b4:	48000800 	.word	0x48000800

080007b8 <StartNormalTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartNormalTask */
void StartNormalTask(void const * argument)
{
 80007b8:	b5b0      	push	{r4, r5, r7, lr}
 80007ba:	b09e      	sub	sp, #120	; 0x78
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	const char messageNormal_1[] = "Entered NormalTask and waiting for semaphore\r\n";
 80007c0:	4b35      	ldr	r3, [pc, #212]	; (8000898 <StartNormalTask+0xe0>)
 80007c2:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80007c6:	461d      	mov	r5, r3
 80007c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007d4:	c407      	stmia	r4!, {r0, r1, r2}
 80007d6:	8023      	strh	r3, [r4, #0]
 80007d8:	3402      	adds	r4, #2
 80007da:	0c1b      	lsrs	r3, r3, #16
 80007dc:	7023      	strb	r3, [r4, #0]
	const char messageNormal_2[] = "Leaving NormalTask\r\n\n";
 80007de:	4b2f      	ldr	r3, [pc, #188]	; (800089c <StartNormalTask+0xe4>)
 80007e0:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80007e4:	461d      	mov	r5, r3
 80007e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007ee:	6020      	str	r0, [r4, #0]
 80007f0:	3404      	adds	r4, #4
 80007f2:	8021      	strh	r1, [r4, #0]
	const char messageNormal_3[] = "Semaphore acquired by NormalTask\r\n";
 80007f4:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <StartNormalTask+0xe8>)
 80007f6:	f107 040c 	add.w	r4, r7, #12
 80007fa:	461d      	mov	r5, r3
 80007fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000804:	682b      	ldr	r3, [r5, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	8022      	strh	r2, [r4, #0]
 800080a:	3402      	adds	r4, #2
 800080c:	0c1b      	lsrs	r3, r3, #16
 800080e:	7023      	strb	r3, [r4, #0]
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Transmit(&huart2, (uint8_t*)&messageNormal_1, strlen(messageNormal_1), HAL_MAX_DELAY);
 8000810:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fcdb 	bl	80001d0 <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	b29a      	uxth	r2, r3
 800081e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	481f      	ldr	r0, [pc, #124]	; (80008a4 <StartNormalTask+0xec>)
 8000828:	f002 fbb6 	bl	8002f98 <HAL_UART_Transmit>

	osSemaphoreWait(BinarySemHandle, osWaitForever);
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <StartNormalTask+0xf0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f04f 31ff 	mov.w	r1, #4294967295
 8000834:	4618      	mov	r0, r3
 8000836:	f003 f96d 	bl	8003b14 <osSemaphoreWait>
	HAL_UART_Transmit(&huart2, (uint8_t*)&messageNormal_3, strlen(messageNormal_3), HAL_MAX_DELAY);
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fcc6 	bl	80001d0 <strlen>
 8000844:	4603      	mov	r3, r0
 8000846:	b29a      	uxth	r2, r3
 8000848:	f107 010c 	add.w	r1, r7, #12
 800084c:	f04f 33ff 	mov.w	r3, #4294967295
 8000850:	4814      	ldr	r0, [pc, #80]	; (80008a4 <StartNormalTask+0xec>)
 8000852:	f002 fba1 	bl	8002f98 <HAL_UART_Transmit>
	while (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin));
 8000856:	bf00      	nop
 8000858:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085c:	4813      	ldr	r0, [pc, #76]	; (80008ac <StartNormalTask+0xf4>)
 800085e:	f000 fcf9 	bl	8001254 <HAL_GPIO_ReadPin>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1f7      	bne.n	8000858 <StartNormalTask+0xa0>

	HAL_UART_Transmit(&huart2, (uint8_t*)&messageNormal_2, strlen(messageNormal_2), HAL_MAX_DELAY);
 8000868:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fcaf 	bl	80001d0 <strlen>
 8000872:	4603      	mov	r3, r0
 8000874:	b29a      	uxth	r2, r3
 8000876:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
 800087e:	4809      	ldr	r0, [pc, #36]	; (80008a4 <StartNormalTask+0xec>)
 8000880:	f002 fb8a 	bl	8002f98 <HAL_UART_Transmit>

	osSemaphoreRelease(BinarySemHandle);
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <StartNormalTask+0xf0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f003 f991 	bl	8003bb0 <osSemaphoreRelease>
	osDelay(500);
 800088e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000892:	f003 f8f9 	bl	8003a88 <osDelay>
	HAL_UART_Transmit(&huart2, (uint8_t*)&messageNormal_1, strlen(messageNormal_1), HAL_MAX_DELAY);
 8000896:	e7bb      	b.n	8000810 <StartNormalTask+0x58>
 8000898:	08006394 	.word	0x08006394
 800089c:	080063c4 	.word	0x080063c4
 80008a0:	080063dc 	.word	0x080063dc
 80008a4:	20000344 	.word	0x20000344
 80008a8:	200003d4 	.word	0x200003d4
 80008ac:	48000800 	.word	0x48000800

080008b0 <StartHighTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHighTask */
void StartHighTask(void const * argument)
{
 80008b0:	b5b0      	push	{r4, r5, r7, lr}
 80008b2:	b09c      	sub	sp, #112	; 0x70
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHighTask */
	const char messageHigh_1[] = "Entered HighTask and waiting for semaphore\r\n";
 80008b8:	4b2c      	ldr	r3, [pc, #176]	; (800096c <StartHighTask+0xbc>)
 80008ba:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80008be:	461d      	mov	r5, r3
 80008c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008cc:	c407      	stmia	r4!, {r0, r1, r2}
 80008ce:	7023      	strb	r3, [r4, #0]
	const char messageHigh_2[] = "Leaving HighTask\r\n\n";
 80008d0:	4b27      	ldr	r3, [pc, #156]	; (8000970 <StartHighTask+0xc0>)
 80008d2:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80008d6:	461d      	mov	r5, r3
 80008d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008dc:	682b      	ldr	r3, [r5, #0]
 80008de:	6023      	str	r3, [r4, #0]
	const char messageHigh_3[] = "Semaphore acquired by HighTask\r\n";
 80008e0:	4b24      	ldr	r3, [pc, #144]	; (8000974 <StartHighTask+0xc4>)
 80008e2:	f107 0408 	add.w	r4, r7, #8
 80008e6:	461d      	mov	r5, r3
 80008e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f0:	682b      	ldr	r3, [r5, #0]
 80008f2:	7023      	strb	r3, [r4, #0]
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Transmit(&huart2, (uint8_t*)&messageHigh_1, strlen(messageHigh_1), HAL_MAX_DELAY);
 80008f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fc69 	bl	80001d0 <strlen>
 80008fe:	4603      	mov	r3, r0
 8000900:	b29a      	uxth	r2, r3
 8000902:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	481b      	ldr	r0, [pc, #108]	; (8000978 <StartHighTask+0xc8>)
 800090c:	f002 fb44 	bl	8002f98 <HAL_UART_Transmit>

	osSemaphoreWait(BinarySemHandle, osWaitForever);
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <StartHighTask+0xcc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f04f 31ff 	mov.w	r1, #4294967295
 8000918:	4618      	mov	r0, r3
 800091a:	f003 f8fb 	bl	8003b14 <osSemaphoreWait>
	HAL_UART_Transmit(&huart2, (uint8_t*)&messageHigh_3, strlen(messageHigh_3), HAL_MAX_DELAY);
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fc54 	bl	80001d0 <strlen>
 8000928:	4603      	mov	r3, r0
 800092a:	b29a      	uxth	r2, r3
 800092c:	f107 0108 	add.w	r1, r7, #8
 8000930:	f04f 33ff 	mov.w	r3, #4294967295
 8000934:	4810      	ldr	r0, [pc, #64]	; (8000978 <StartHighTask+0xc8>)
 8000936:	f002 fb2f 	bl	8002f98 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, (uint8_t*)&messageHigh_2, strlen(messageHigh_2), HAL_MAX_DELAY);
 800093a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fc46 	bl	80001d0 <strlen>
 8000944:	4603      	mov	r3, r0
 8000946:	b29a      	uxth	r2, r3
 8000948:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800094c:	f04f 33ff 	mov.w	r3, #4294967295
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <StartHighTask+0xc8>)
 8000952:	f002 fb21 	bl	8002f98 <HAL_UART_Transmit>
	osSemaphoreRelease(BinarySemHandle);
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <StartHighTask+0xcc>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f003 f928 	bl	8003bb0 <osSemaphoreRelease>
    osDelay(500);
 8000960:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000964:	f003 f890 	bl	8003a88 <osDelay>
	HAL_UART_Transmit(&huart2, (uint8_t*)&messageHigh_1, strlen(messageHigh_1), HAL_MAX_DELAY);
 8000968:	e7c4      	b.n	80008f4 <StartHighTask+0x44>
 800096a:	bf00      	nop
 800096c:	08006400 	.word	0x08006400
 8000970:	08006430 	.word	0x08006430
 8000974:	08006444 	.word	0x08006444
 8000978:	20000344 	.word	0x20000344
 800097c:	200003d4 	.word	0x200003d4

08000980 <StartLowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLowTask */
void StartLowTask(void const * argument)
{
 8000980:	b5b0      	push	{r4, r5, r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLowTask */
	const char messageLow_1[] = "Entered LowTask\r\n";
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <StartLowTask+0x74>)
 800098a:	f107 041c 	add.w	r4, r7, #28
 800098e:	461d      	mov	r5, r3
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000994:	682b      	ldr	r3, [r5, #0]
 8000996:	8023      	strh	r3, [r4, #0]
	const char messageLow_2[] = "Leaving LowTask\r\n\n";
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <StartLowTask+0x78>)
 800099a:	f107 0408 	add.w	r4, r7, #8
 800099e:	461d      	mov	r5, r3
 80009a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a4:	682b      	ldr	r3, [r5, #0]
 80009a6:	461a      	mov	r2, r3
 80009a8:	8022      	strh	r2, [r4, #0]
 80009aa:	3402      	adds	r4, #2
 80009ac:	0c1b      	lsrs	r3, r3, #16
 80009ae:	7023      	strb	r3, [r4, #0]
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Transmit(&huart2, (uint8_t*)&messageLow_1, strlen(messageLow_1), HAL_MAX_DELAY);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fc0b 	bl	80001d0 <strlen>
 80009ba:	4603      	mov	r3, r0
 80009bc:	b29a      	uxth	r2, r3
 80009be:	f107 011c 	add.w	r1, r7, #28
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	480d      	ldr	r0, [pc, #52]	; (80009fc <StartLowTask+0x7c>)
 80009c8:	f002 fae6 	bl	8002f98 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, (uint8_t*)&messageLow_2, strlen(messageLow_2), HAL_MAX_DELAY);
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fbfd 	bl	80001d0 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b29a      	uxth	r2, r3
 80009da:	f107 0108 	add.w	r1, r7, #8
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <StartLowTask+0x7c>)
 80009e4:	f002 fad8 	bl	8002f98 <HAL_UART_Transmit>
	osDelay(500);
 80009e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ec:	f003 f84c 	bl	8003a88 <osDelay>
	HAL_UART_Transmit(&huart2, (uint8_t*)&messageLow_1, strlen(messageLow_1), HAL_MAX_DELAY);
 80009f0:	e7de      	b.n	80009b0 <StartLowTask+0x30>
 80009f2:	bf00      	nop
 80009f4:	08006468 	.word	0x08006468
 80009f8:	0800647c 	.word	0x0800647c
 80009fc:	20000344 	.word	0x20000344

08000a00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d101      	bne.n	8000a16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a12:	f000 f973 	bl	8000cfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40012c00 	.word	0x40012c00

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3a:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6613      	str	r3, [r2, #96]	; 0x60
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a58:	6593      	str	r3, [r2, #88]	; 0x58
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	210f      	movs	r1, #15
 8000a6a:	f06f 0001 	mvn.w	r0, #1
 8000a6e:	f000 fa1d 	bl	8000eac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000

08000a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b0ac      	sub	sp, #176	; 0xb0
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2288      	movs	r2, #136	; 0x88
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f005 fb67 	bl	8006174 <memset>
  if(huart->Instance==USART2)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <HAL_UART_MspInit+0xb0>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d13b      	bne.n	8000b28 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4618      	mov	r0, r3
 8000abe:	f001 fa8f 	bl	8001fe0 <HAL_RCCEx_PeriphCLKConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ac8:	f7ff ffac 	bl	8000a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <HAL_UART_MspInit+0xb4>)
 8000ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad0:	4a18      	ldr	r2, [pc, #96]	; (8000b34 <HAL_UART_MspInit+0xb4>)
 8000ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <HAL_UART_MspInit+0xb4>)
 8000ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <HAL_UART_MspInit+0xb4>)
 8000ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae8:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <HAL_UART_MspInit+0xb4>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_UART_MspInit+0xb4>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000afc:	230c      	movs	r3, #12
 8000afe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b14:	2307      	movs	r3, #7
 8000b16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b24:	f000 f9ec 	bl	8000f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b28:	bf00      	nop
 8000b2a:	37b0      	adds	r7, #176	; 0xb0
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40004400 	.word	0x40004400
 8000b34:	40021000 	.word	0x40021000

08000b38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	; 0x30
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b46:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <HAL_InitTick+0xc8>)
 8000b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4a:	4a2d      	ldr	r2, [pc, #180]	; (8000c00 <HAL_InitTick+0xc8>)
 8000b4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b50:	6613      	str	r3, [r2, #96]	; 0x60
 8000b52:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <HAL_InitTick+0xc8>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b5e:	f107 020c 	add.w	r2, r7, #12
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f001 f9a7 	bl	8001ebc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b6e:	f001 f98f 	bl	8001e90 <HAL_RCC_GetPCLK2Freq>
 8000b72:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b76:	4a23      	ldr	r2, [pc, #140]	; (8000c04 <HAL_InitTick+0xcc>)
 8000b78:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7c:	0c9b      	lsrs	r3, r3, #18
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b82:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <HAL_InitTick+0xd0>)
 8000b84:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <HAL_InitTick+0xd4>)
 8000b86:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b88:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <HAL_InitTick+0xd0>)
 8000b8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b8e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b90:	4a1d      	ldr	r2, [pc, #116]	; (8000c08 <HAL_InitTick+0xd0>)
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <HAL_InitTick+0xd0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <HAL_InitTick+0xd0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <HAL_InitTick+0xd0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ba8:	4817      	ldr	r0, [pc, #92]	; (8000c08 <HAL_InitTick+0xd0>)
 8000baa:	f001 fed5 	bl	8002958 <HAL_TIM_Base_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000bb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d11b      	bne.n	8000bf4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000bbc:	4812      	ldr	r0, [pc, #72]	; (8000c08 <HAL_InitTick+0xd0>)
 8000bbe:	f001 ff2d 	bl	8002a1c <HAL_TIM_Base_Start_IT>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000bc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d111      	bne.n	8000bf4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000bd0:	2019      	movs	r0, #25
 8000bd2:	f000 f987 	bl	8000ee4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b0f      	cmp	r3, #15
 8000bda:	d808      	bhi.n	8000bee <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	2019      	movs	r0, #25
 8000be2:	f000 f963 	bl	8000eac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <HAL_InitTick+0xd8>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	e002      	b.n	8000bf4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000bf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3730      	adds	r7, #48	; 0x30
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40021000 	.word	0x40021000
 8000c04:	431bde83 	.word	0x431bde83
 8000c08:	200003d8 	.word	0x200003d8
 8000c0c:	40012c00 	.word	0x40012c00
 8000c10:	20000004 	.word	0x20000004

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <NMI_Handler+0x4>

08000c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler+0x4>

08000c26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c46:	f001 ff59 	bl	8002afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200003d8 	.word	0x200003d8

08000c54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <SystemInit+0x20>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <SystemInit+0x20>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c7c:	f7ff ffea 	bl	8000c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c80:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c82:	490d      	ldr	r1, [pc, #52]	; (8000cb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <LoopForever+0xe>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c98:	4c0a      	ldr	r4, [pc, #40]	; (8000cc4 <LoopForever+0x16>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f005 fa31 	bl	800610c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000caa:	f7ff fc35 	bl	8000518 <main>

08000cae <LoopForever>:

LoopForever:
    b LoopForever
 8000cae:	e7fe      	b.n	8000cae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000cbc:	08006550 	.word	0x08006550
  ldr r2, =_sbss
 8000cc0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cc4:	2000113c 	.word	0x2000113c

08000cc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC1_2_IRQHandler>

08000cca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f000 f8de 	bl	8000e96 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cda:	200f      	movs	r0, #15
 8000cdc:	f7ff ff2c 	bl	8000b38 <HAL_InitTick>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d002      	beq.n	8000cec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	71fb      	strb	r3, [r7, #7]
 8000cea:	e001      	b.n	8000cf0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cec:	f7ff fea0 	bl	8000a30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x20>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x24>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_IncTick+0x24>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000424 	.word	0x20000424

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_GetTick+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000424 	.word	0x20000424

08000d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6e:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	60d3      	str	r3, [r2, #12]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <__NVIC_GetPriorityGrouping+0x18>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	f003 0307 	and.w	r3, r3, #7
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	db0b      	blt.n	8000dca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f003 021f 	and.w	r2, r3, #31
 8000db8:	4907      	ldr	r1, [pc, #28]	; (8000dd8 <__NVIC_EnableIRQ+0x38>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	; (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	; (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ff4c 	bl	8000d3c <__NVIC_SetPriorityGrouping>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ebe:	f7ff ff61 	bl	8000d84 <__NVIC_GetPriorityGrouping>
 8000ec2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	68b9      	ldr	r1, [r7, #8]
 8000ec8:	6978      	ldr	r0, [r7, #20]
 8000eca:	f7ff ffb1 	bl	8000e30 <NVIC_EncodePriority>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff80 	bl	8000ddc <__NVIC_SetPriority>
}
 8000edc:	bf00      	nop
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff54 	bl	8000da0 <__NVIC_EnableIRQ>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b087      	sub	sp, #28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0e:	e17f      	b.n	8001210 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	2101      	movs	r1, #1
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f000 8171 	beq.w	800120a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d005      	beq.n	8000f40 <HAL_GPIO_Init+0x40>
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d130      	bne.n	8000fa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	68da      	ldr	r2, [r3, #12]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f76:	2201      	movs	r2, #1
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	091b      	lsrs	r3, r3, #4
 8000f8c:	f003 0201 	and.w	r2, r3, #1
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d118      	bne.n	8000fe0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	08db      	lsrs	r3, r3, #3
 8000fca:	f003 0201 	and.w	r2, r3, #1
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d017      	beq.n	800101c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d123      	bne.n	8001070 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	08da      	lsrs	r2, r3, #3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3208      	adds	r2, #8
 8001030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	691a      	ldr	r2, [r3, #16]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	08da      	lsrs	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3208      	adds	r2, #8
 800106a:	6939      	ldr	r1, [r7, #16]
 800106c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0203 	and.w	r2, r3, #3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 80ac 	beq.w	800120a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	4b5f      	ldr	r3, [pc, #380]	; (8001230 <HAL_GPIO_Init+0x330>)
 80010b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b6:	4a5e      	ldr	r2, [pc, #376]	; (8001230 <HAL_GPIO_Init+0x330>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6613      	str	r3, [r2, #96]	; 0x60
 80010be:	4b5c      	ldr	r3, [pc, #368]	; (8001230 <HAL_GPIO_Init+0x330>)
 80010c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010ca:	4a5a      	ldr	r2, [pc, #360]	; (8001234 <HAL_GPIO_Init+0x334>)
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	089b      	lsrs	r3, r3, #2
 80010d0:	3302      	adds	r3, #2
 80010d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	220f      	movs	r2, #15
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010f4:	d025      	beq.n	8001142 <HAL_GPIO_Init+0x242>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4f      	ldr	r2, [pc, #316]	; (8001238 <HAL_GPIO_Init+0x338>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d01f      	beq.n	800113e <HAL_GPIO_Init+0x23e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4e      	ldr	r2, [pc, #312]	; (800123c <HAL_GPIO_Init+0x33c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d019      	beq.n	800113a <HAL_GPIO_Init+0x23a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4d      	ldr	r2, [pc, #308]	; (8001240 <HAL_GPIO_Init+0x340>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d013      	beq.n	8001136 <HAL_GPIO_Init+0x236>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4c      	ldr	r2, [pc, #304]	; (8001244 <HAL_GPIO_Init+0x344>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d00d      	beq.n	8001132 <HAL_GPIO_Init+0x232>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4b      	ldr	r2, [pc, #300]	; (8001248 <HAL_GPIO_Init+0x348>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d007      	beq.n	800112e <HAL_GPIO_Init+0x22e>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4a      	ldr	r2, [pc, #296]	; (800124c <HAL_GPIO_Init+0x34c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d101      	bne.n	800112a <HAL_GPIO_Init+0x22a>
 8001126:	2306      	movs	r3, #6
 8001128:	e00c      	b.n	8001144 <HAL_GPIO_Init+0x244>
 800112a:	2307      	movs	r3, #7
 800112c:	e00a      	b.n	8001144 <HAL_GPIO_Init+0x244>
 800112e:	2305      	movs	r3, #5
 8001130:	e008      	b.n	8001144 <HAL_GPIO_Init+0x244>
 8001132:	2304      	movs	r3, #4
 8001134:	e006      	b.n	8001144 <HAL_GPIO_Init+0x244>
 8001136:	2303      	movs	r3, #3
 8001138:	e004      	b.n	8001144 <HAL_GPIO_Init+0x244>
 800113a:	2302      	movs	r3, #2
 800113c:	e002      	b.n	8001144 <HAL_GPIO_Init+0x244>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <HAL_GPIO_Init+0x244>
 8001142:	2300      	movs	r3, #0
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	f002 0203 	and.w	r2, r2, #3
 800114a:	0092      	lsls	r2, r2, #2
 800114c:	4093      	lsls	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001154:	4937      	ldr	r1, [pc, #220]	; (8001234 <HAL_GPIO_Init+0x334>)
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	3302      	adds	r3, #2
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001162:	4b3b      	ldr	r3, [pc, #236]	; (8001250 <HAL_GPIO_Init+0x350>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001186:	4a32      	ldr	r2, [pc, #200]	; (8001250 <HAL_GPIO_Init+0x350>)
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800118c:	4b30      	ldr	r3, [pc, #192]	; (8001250 <HAL_GPIO_Init+0x350>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011b0:	4a27      	ldr	r2, [pc, #156]	; (8001250 <HAL_GPIO_Init+0x350>)
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <HAL_GPIO_Init+0x350>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011da:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <HAL_GPIO_Init+0x350>)
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <HAL_GPIO_Init+0x350>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001204:	4a12      	ldr	r2, [pc, #72]	; (8001250 <HAL_GPIO_Init+0x350>)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa22 f303 	lsr.w	r3, r2, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	f47f ae78 	bne.w	8000f10 <HAL_GPIO_Init+0x10>
  }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	371c      	adds	r7, #28
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
 8001234:	40010000 	.word	0x40010000
 8001238:	48000400 	.word	0x48000400
 800123c:	48000800 	.word	0x48000800
 8001240:	48000c00 	.word	0x48000c00
 8001244:	48001000 	.word	0x48001000
 8001248:	48001400 	.word	0x48001400
 800124c:	48001800 	.word	0x48001800
 8001250:	40010400 	.word	0x40010400

08001254 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	887b      	ldrh	r3, [r7, #2]
 8001266:	4013      	ands	r3, r2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d002      	beq.n	8001272 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800126c:	2301      	movs	r3, #1
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	e001      	b.n	8001276 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001276:	7bfb      	ldrb	r3, [r7, #15]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
 8001290:	4613      	mov	r3, r2
 8001292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001294:	787b      	ldrb	r3, [r7, #1]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <HAL_PWREx_GetVoltageRange+0x18>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40007000 	.word	0x40007000

080012d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012de:	d130      	bne.n	8001342 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012e0:	4b23      	ldr	r3, [pc, #140]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012ec:	d038      	beq.n	8001360 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012f6:	4a1e      	ldr	r2, [pc, #120]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2232      	movs	r2, #50	; 0x32
 8001304:	fb02 f303 	mul.w	r3, r2, r3
 8001308:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	0c9b      	lsrs	r3, r3, #18
 8001310:	3301      	adds	r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001314:	e002      	b.n	800131c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	3b01      	subs	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001328:	d102      	bne.n	8001330 <HAL_PWREx_ControlVoltageScaling+0x60>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f2      	bne.n	8001316 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800133c:	d110      	bne.n	8001360 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e00f      	b.n	8001362 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800134a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800134e:	d007      	beq.n	8001360 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001358:	4a05      	ldr	r2, [pc, #20]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40007000 	.word	0x40007000
 8001374:	20000000 	.word	0x20000000
 8001378:	431bde83 	.word	0x431bde83

0800137c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e3ca      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800138e:	4b97      	ldr	r3, [pc, #604]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 030c 	and.w	r3, r3, #12
 8001396:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001398:	4b94      	ldr	r3, [pc, #592]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0310 	and.w	r3, r3, #16
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 80e4 	beq.w	8001578 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d007      	beq.n	80013c6 <HAL_RCC_OscConfig+0x4a>
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	2b0c      	cmp	r3, #12
 80013ba:	f040 808b 	bne.w	80014d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	f040 8087 	bne.w	80014d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013c6:	4b89      	ldr	r3, [pc, #548]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <HAL_RCC_OscConfig+0x62>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e3a2      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a1a      	ldr	r2, [r3, #32]
 80013e2:	4b82      	ldr	r3, [pc, #520]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d004      	beq.n	80013f8 <HAL_RCC_OscConfig+0x7c>
 80013ee:	4b7f      	ldr	r3, [pc, #508]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013f6:	e005      	b.n	8001404 <HAL_RCC_OscConfig+0x88>
 80013f8:	4b7c      	ldr	r3, [pc, #496]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80013fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013fe:	091b      	lsrs	r3, r3, #4
 8001400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001404:	4293      	cmp	r3, r2
 8001406:	d223      	bcs.n	8001450 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	4618      	mov	r0, r3
 800140e:	f000 fd87 	bl	8001f20 <RCC_SetFlashLatencyFromMSIRange>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e383      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800141c:	4b73      	ldr	r3, [pc, #460]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a72      	ldr	r2, [pc, #456]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001422:	f043 0308 	orr.w	r3, r3, #8
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b70      	ldr	r3, [pc, #448]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	496d      	ldr	r1, [pc, #436]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800143a:	4b6c      	ldr	r3, [pc, #432]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	4968      	ldr	r1, [pc, #416]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800144a:	4313      	orrs	r3, r2
 800144c:	604b      	str	r3, [r1, #4]
 800144e:	e025      	b.n	800149c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001450:	4b66      	ldr	r3, [pc, #408]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a65      	ldr	r2, [pc, #404]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b63      	ldr	r3, [pc, #396]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4960      	ldr	r1, [pc, #384]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800146a:	4313      	orrs	r3, r2
 800146c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800146e:	4b5f      	ldr	r3, [pc, #380]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	495b      	ldr	r1, [pc, #364]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800147e:	4313      	orrs	r3, r2
 8001480:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d109      	bne.n	800149c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	4618      	mov	r0, r3
 800148e:	f000 fd47 	bl	8001f20 <RCC_SetFlashLatencyFromMSIRange>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e343      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800149c:	f000 fc4a 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 80014a0:	4602      	mov	r2, r0
 80014a2:	4b52      	ldr	r3, [pc, #328]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	091b      	lsrs	r3, r3, #4
 80014a8:	f003 030f 	and.w	r3, r3, #15
 80014ac:	4950      	ldr	r1, [pc, #320]	; (80015f0 <HAL_RCC_OscConfig+0x274>)
 80014ae:	5ccb      	ldrb	r3, [r1, r3]
 80014b0:	f003 031f 	and.w	r3, r3, #31
 80014b4:	fa22 f303 	lsr.w	r3, r2, r3
 80014b8:	4a4e      	ldr	r2, [pc, #312]	; (80015f4 <HAL_RCC_OscConfig+0x278>)
 80014ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014bc:	4b4e      	ldr	r3, [pc, #312]	; (80015f8 <HAL_RCC_OscConfig+0x27c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fb39 	bl	8000b38 <HAL_InitTick>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d052      	beq.n	8001576 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	e327      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d032      	beq.n	8001542 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014dc:	4b43      	ldr	r3, [pc, #268]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a42      	ldr	r2, [pc, #264]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fc1c 	bl	8000d24 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014f0:	f7ff fc18 	bl	8000d24 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e310      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001502:	4b3a      	ldr	r3, [pc, #232]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800150e:	4b37      	ldr	r3, [pc, #220]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a36      	ldr	r2, [pc, #216]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b34      	ldr	r3, [pc, #208]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	4931      	ldr	r1, [pc, #196]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001528:	4313      	orrs	r3, r2
 800152a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800152c:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	492c      	ldr	r1, [pc, #176]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
 8001540:	e01a      	b.n	8001578 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001542:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a29      	ldr	r2, [pc, #164]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800154e:	f7ff fbe9 	bl	8000d24 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001556:	f7ff fbe5 	bl	8000d24 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e2dd      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001568:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f0      	bne.n	8001556 <HAL_RCC_OscConfig+0x1da>
 8001574:	e000      	b.n	8001578 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001576:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	2b00      	cmp	r3, #0
 8001582:	d074      	beq.n	800166e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	2b08      	cmp	r3, #8
 8001588:	d005      	beq.n	8001596 <HAL_RCC_OscConfig+0x21a>
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	2b0c      	cmp	r3, #12
 800158e:	d10e      	bne.n	80015ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	2b03      	cmp	r3, #3
 8001594:	d10b      	bne.n	80015ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d064      	beq.n	800166c <HAL_RCC_OscConfig+0x2f0>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d160      	bne.n	800166c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e2ba      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b6:	d106      	bne.n	80015c6 <HAL_RCC_OscConfig+0x24a>
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80015be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	e026      	b.n	8001614 <HAL_RCC_OscConfig+0x298>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ce:	d115      	bne.n	80015fc <HAL_RCC_OscConfig+0x280>
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a05      	ldr	r2, [pc, #20]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80015d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a02      	ldr	r2, [pc, #8]	; (80015ec <HAL_RCC_OscConfig+0x270>)
 80015e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	e014      	b.n	8001614 <HAL_RCC_OscConfig+0x298>
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	08006498 	.word	0x08006498
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000004 	.word	0x20000004
 80015fc:	4ba0      	ldr	r3, [pc, #640]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a9f      	ldr	r2, [pc, #636]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b9d      	ldr	r3, [pc, #628]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a9c      	ldr	r2, [pc, #624]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 800160e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d013      	beq.n	8001644 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161c:	f7ff fb82 	bl	8000d24 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff fb7e 	bl	8000d24 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e276      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001636:	4b92      	ldr	r3, [pc, #584]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0x2a8>
 8001642:	e014      	b.n	800166e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001644:	f7ff fb6e 	bl	8000d24 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff fb6a 	bl	8000d24 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	; 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e262      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800165e:	4b88      	ldr	r3, [pc, #544]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x2d0>
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d060      	beq.n	800173c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	2b04      	cmp	r3, #4
 800167e:	d005      	beq.n	800168c <HAL_RCC_OscConfig+0x310>
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2b0c      	cmp	r3, #12
 8001684:	d119      	bne.n	80016ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	2b02      	cmp	r3, #2
 800168a:	d116      	bne.n	80016ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800168c:	4b7c      	ldr	r3, [pc, #496]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <HAL_RCC_OscConfig+0x328>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e23f      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a4:	4b76      	ldr	r3, [pc, #472]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	061b      	lsls	r3, r3, #24
 80016b2:	4973      	ldr	r1, [pc, #460]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b8:	e040      	b.n	800173c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d023      	beq.n	800170a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c2:	4b6f      	ldr	r3, [pc, #444]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a6e      	ldr	r2, [pc, #440]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80016c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ce:	f7ff fb29 	bl	8000d24 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d6:	f7ff fb25 	bl	8000d24 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e21d      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e8:	4b65      	ldr	r3, [pc, #404]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f4:	4b62      	ldr	r3, [pc, #392]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	061b      	lsls	r3, r3, #24
 8001702:	495f      	ldr	r1, [pc, #380]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001704:	4313      	orrs	r3, r2
 8001706:	604b      	str	r3, [r1, #4]
 8001708:	e018      	b.n	800173c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170a:	4b5d      	ldr	r3, [pc, #372]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a5c      	ldr	r2, [pc, #368]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001716:	f7ff fb05 	bl	8000d24 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171e:	f7ff fb01 	bl	8000d24 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e1f9      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001730:	4b53      	ldr	r3, [pc, #332]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f0      	bne.n	800171e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	2b00      	cmp	r3, #0
 8001746:	d03c      	beq.n	80017c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d01c      	beq.n	800178a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001750:	4b4b      	ldr	r3, [pc, #300]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001756:	4a4a      	ldr	r2, [pc, #296]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff fae0 	bl	8000d24 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001768:	f7ff fadc 	bl	8000d24 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e1d4      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800177a:	4b41      	ldr	r3, [pc, #260]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 800177c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0ef      	beq.n	8001768 <HAL_RCC_OscConfig+0x3ec>
 8001788:	e01b      	b.n	80017c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178a:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 800178c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001790:	4a3b      	ldr	r2, [pc, #236]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001792:	f023 0301 	bic.w	r3, r3, #1
 8001796:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179a:	f7ff fac3 	bl	8000d24 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a2:	f7ff fabf 	bl	8000d24 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e1b7      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017b4:	4b32      	ldr	r3, [pc, #200]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80017b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1ef      	bne.n	80017a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 80a6 	beq.w	800191c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d0:	2300      	movs	r3, #0
 80017d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017d4:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10d      	bne.n	80017fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e0:	4b27      	ldr	r3, [pc, #156]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80017e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e4:	4a26      	ldr	r2, [pc, #152]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80017e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ea:	6593      	str	r3, [r2, #88]	; 0x58
 80017ec:	4b24      	ldr	r3, [pc, #144]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f8:	2301      	movs	r3, #1
 80017fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017fc:	4b21      	ldr	r3, [pc, #132]	; (8001884 <HAL_RCC_OscConfig+0x508>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001804:	2b00      	cmp	r3, #0
 8001806:	d118      	bne.n	800183a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <HAL_RCC_OscConfig+0x508>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <HAL_RCC_OscConfig+0x508>)
 800180e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001812:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001814:	f7ff fa86 	bl	8000d24 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181c:	f7ff fa82 	bl	8000d24 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e17a      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_RCC_OscConfig+0x508>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d108      	bne.n	8001854 <HAL_RCC_OscConfig+0x4d8>
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001852:	e029      	b.n	80018a8 <HAL_RCC_OscConfig+0x52c>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b05      	cmp	r3, #5
 800185a:	d115      	bne.n	8001888 <HAL_RCC_OscConfig+0x50c>
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 800185e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001862:	4a07      	ldr	r2, [pc, #28]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 800186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001872:	4a03      	ldr	r2, [pc, #12]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800187c:	e014      	b.n	80018a8 <HAL_RCC_OscConfig+0x52c>
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000
 8001884:	40007000 	.word	0x40007000
 8001888:	4b9c      	ldr	r3, [pc, #624]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 800188a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188e:	4a9b      	ldr	r2, [pc, #620]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001898:	4b98      	ldr	r3, [pc, #608]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 800189a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189e:	4a97      	ldr	r2, [pc, #604]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 80018a0:	f023 0304 	bic.w	r3, r3, #4
 80018a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d016      	beq.n	80018de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b0:	f7ff fa38 	bl	8000d24 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b8:	f7ff fa34 	bl	8000d24 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e12a      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ce:	4b8b      	ldr	r3, [pc, #556]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 80018d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ed      	beq.n	80018b8 <HAL_RCC_OscConfig+0x53c>
 80018dc:	e015      	b.n	800190a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018de:	f7ff fa21 	bl	8000d24 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018e4:	e00a      	b.n	80018fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7ff fa1d 	bl	8000d24 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e113      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018fc:	4b7f      	ldr	r3, [pc, #508]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 80018fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1ed      	bne.n	80018e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800190a:	7ffb      	ldrb	r3, [r7, #31]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001910:	4b7a      	ldr	r3, [pc, #488]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001914:	4a79      	ldr	r2, [pc, #484]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800191a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80fe 	beq.w	8001b22 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192a:	2b02      	cmp	r3, #2
 800192c:	f040 80d0 	bne.w	8001ad0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001930:	4b72      	ldr	r3, [pc, #456]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 0203 	and.w	r2, r3, #3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	429a      	cmp	r2, r3
 8001942:	d130      	bne.n	80019a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	3b01      	subs	r3, #1
 8001950:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	429a      	cmp	r2, r3
 8001954:	d127      	bne.n	80019a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001960:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001962:	429a      	cmp	r2, r3
 8001964:	d11f      	bne.n	80019a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001970:	2a07      	cmp	r2, #7
 8001972:	bf14      	ite	ne
 8001974:	2201      	movne	r2, #1
 8001976:	2200      	moveq	r2, #0
 8001978:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800197a:	4293      	cmp	r3, r2
 800197c:	d113      	bne.n	80019a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001988:	085b      	lsrs	r3, r3, #1
 800198a:	3b01      	subs	r3, #1
 800198c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800198e:	429a      	cmp	r2, r3
 8001990:	d109      	bne.n	80019a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	085b      	lsrs	r3, r3, #1
 800199e:	3b01      	subs	r3, #1
 80019a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d06e      	beq.n	8001a84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b0c      	cmp	r3, #12
 80019aa:	d069      	beq.n	8001a80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019ac:	4b53      	ldr	r3, [pc, #332]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d105      	bne.n	80019c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019b8:	4b50      	ldr	r3, [pc, #320]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0ad      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019c8:	4b4c      	ldr	r3, [pc, #304]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a4b      	ldr	r2, [pc, #300]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 80019ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019d4:	f7ff f9a6 	bl	8000d24 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff f9a2 	bl	8000d24 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e09a      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ee:	4b43      	ldr	r3, [pc, #268]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019fa:	4b40      	ldr	r3, [pc, #256]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	4b40      	ldr	r3, [pc, #256]	; (8001b00 <HAL_RCC_OscConfig+0x784>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a0a:	3a01      	subs	r2, #1
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	4311      	orrs	r1, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a14:	0212      	lsls	r2, r2, #8
 8001a16:	4311      	orrs	r1, r2
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a1c:	0852      	lsrs	r2, r2, #1
 8001a1e:	3a01      	subs	r2, #1
 8001a20:	0552      	lsls	r2, r2, #21
 8001a22:	4311      	orrs	r1, r2
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a28:	0852      	lsrs	r2, r2, #1
 8001a2a:	3a01      	subs	r2, #1
 8001a2c:	0652      	lsls	r2, r2, #25
 8001a2e:	4311      	orrs	r1, r2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a34:	0912      	lsrs	r2, r2, #4
 8001a36:	0452      	lsls	r2, r2, #17
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	4930      	ldr	r1, [pc, #192]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a40:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a2d      	ldr	r2, [pc, #180]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a4c:	4b2b      	ldr	r3, [pc, #172]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4a2a      	ldr	r2, [pc, #168]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a58:	f7ff f964 	bl	8000d24 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a60:	f7ff f960 	bl	8000d24 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e058      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a72:	4b22      	ldr	r3, [pc, #136]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a7e:	e050      	b.n	8001b22 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e04f      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a84:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d148      	bne.n	8001b22 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a19      	ldr	r2, [pc, #100]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a9c:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	4a16      	ldr	r2, [pc, #88]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aa6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001aa8:	f7ff f93c 	bl	8000d24 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7ff f938 	bl	8000d24 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e030      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x734>
 8001ace:	e028      	b.n	8001b22 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	2b0c      	cmp	r3, #12
 8001ad4:	d023      	beq.n	8001b1e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a08      	ldr	r2, [pc, #32]	; (8001afc <HAL_RCC_OscConfig+0x780>)
 8001adc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7ff f91f 	bl	8000d24 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae8:	e00c      	b.n	8001b04 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aea:	f7ff f91b 	bl	8000d24 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d905      	bls.n	8001b04 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e013      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
 8001afc:	40021000 	.word	0x40021000
 8001b00:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_RCC_OscConfig+0x7b0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ec      	bne.n	8001aea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_RCC_OscConfig+0x7b0>)
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	4905      	ldr	r1, [pc, #20]	; (8001b2c <HAL_RCC_OscConfig+0x7b0>)
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_RCC_OscConfig+0x7b4>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60cb      	str	r3, [r1, #12]
 8001b1c:	e001      	b.n	8001b22 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	feeefffc 	.word	0xfeeefffc

08001b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0e7      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b48:	4b75      	ldr	r3, [pc, #468]	; (8001d20 <HAL_RCC_ClockConfig+0x1ec>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d910      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b72      	ldr	r3, [pc, #456]	; (8001d20 <HAL_RCC_ClockConfig+0x1ec>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 0207 	bic.w	r2, r3, #7
 8001b5e:	4970      	ldr	r1, [pc, #448]	; (8001d20 <HAL_RCC_ClockConfig+0x1ec>)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b6e      	ldr	r3, [pc, #440]	; (8001d20 <HAL_RCC_ClockConfig+0x1ec>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0cf      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d010      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	4b66      	ldr	r3, [pc, #408]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d908      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b94:	4b63      	ldr	r3, [pc, #396]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4960      	ldr	r1, [pc, #384]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d04c      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bba:	4b5a      	ldr	r3, [pc, #360]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d121      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e0a6      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bd2:	4b54      	ldr	r3, [pc, #336]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d115      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e09a      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d107      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bea:	4b4e      	ldr	r3, [pc, #312]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e08e      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bfa:	4b4a      	ldr	r3, [pc, #296]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e086      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c0a:	4b46      	ldr	r3, [pc, #280]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f023 0203 	bic.w	r2, r3, #3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4943      	ldr	r1, [pc, #268]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c1c:	f7ff f882 	bl	8000d24 <HAL_GetTick>
 8001c20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c22:	e00a      	b.n	8001c3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c24:	f7ff f87e 	bl	8000d24 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e06e      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3a:	4b3a      	ldr	r3, [pc, #232]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 020c 	and.w	r2, r3, #12
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d1eb      	bne.n	8001c24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d010      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	4b31      	ldr	r3, [pc, #196]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d208      	bcs.n	8001c7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c68:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	492b      	ldr	r1, [pc, #172]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c7a:	4b29      	ldr	r3, [pc, #164]	; (8001d20 <HAL_RCC_ClockConfig+0x1ec>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d210      	bcs.n	8001caa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c88:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <HAL_RCC_ClockConfig+0x1ec>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 0207 	bic.w	r2, r3, #7
 8001c90:	4923      	ldr	r1, [pc, #140]	; (8001d20 <HAL_RCC_ClockConfig+0x1ec>)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c98:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <HAL_RCC_ClockConfig+0x1ec>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d001      	beq.n	8001caa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e036      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d008      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	4918      	ldr	r1, [pc, #96]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d009      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	4910      	ldr	r1, [pc, #64]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ce8:	f000 f824 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	490b      	ldr	r1, [pc, #44]	; (8001d28 <HAL_RCC_ClockConfig+0x1f4>)
 8001cfa:	5ccb      	ldrb	r3, [r1, r3]
 8001cfc:	f003 031f 	and.w	r3, r3, #31
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
 8001d04:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <HAL_RCC_ClockConfig+0x1f8>)
 8001d06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_RCC_ClockConfig+0x1fc>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe ff13 	bl	8000b38 <HAL_InitTick>
 8001d12:	4603      	mov	r3, r0
 8001d14:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d16:	7afb      	ldrb	r3, [r7, #11]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40022000 	.word	0x40022000
 8001d24:	40021000 	.word	0x40021000
 8001d28:	08006498 	.word	0x08006498
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	20000004 	.word	0x20000004

08001d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d42:	4b3e      	ldr	r3, [pc, #248]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d4c:	4b3b      	ldr	r3, [pc, #236]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0x34>
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	2b0c      	cmp	r3, #12
 8001d60:	d121      	bne.n	8001da6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d11e      	bne.n	8001da6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d68:	4b34      	ldr	r3, [pc, #208]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d107      	bne.n	8001d84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d74:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	e005      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d84:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d90:	4a2b      	ldr	r2, [pc, #172]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10d      	bne.n	8001dbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001da4:	e00a      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d102      	bne.n	8001db2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dae:	61bb      	str	r3, [r7, #24]
 8001db0:	e004      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001db8:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	2b0c      	cmp	r3, #12
 8001dc0:	d134      	bne.n	8001e2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d003      	beq.n	8001dda <HAL_RCC_GetSysClockFreq+0xa6>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d003      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0xac>
 8001dd8:	e005      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dda:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ddc:	617b      	str	r3, [r7, #20]
      break;
 8001dde:	e005      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x114>)
 8001de2:	617b      	str	r3, [r7, #20]
      break;
 8001de4:	e002      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	617b      	str	r3, [r7, #20]
      break;
 8001dea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dec:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	3301      	adds	r3, #1
 8001df8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	fb03 f202 	mul.w	r2, r3, r2
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	0e5b      	lsrs	r3, r3, #25
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e2c:	69bb      	ldr	r3, [r7, #24]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3724      	adds	r7, #36	; 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	080064b0 	.word	0x080064b0
 8001e44:	00f42400 	.word	0x00f42400
 8001e48:	007a1200 	.word	0x007a1200

08001e4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000000 	.word	0x20000000

08001e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e68:	f7ff fff0 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4904      	ldr	r1, [pc, #16]	; (8001e8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	080064a8 	.word	0x080064a8

08001e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e94:	f7ff ffda 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	0adb      	lsrs	r3, r3, #11
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	4904      	ldr	r1, [pc, #16]	; (8001eb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ea6:	5ccb      	ldrb	r3, [r1, r3]
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	080064a8 	.word	0x080064a8

08001ebc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	220f      	movs	r2, #15
 8001eca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 0203 	and.w	r2, r3, #3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <HAL_RCC_GetClockConfig+0x5c>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	08db      	lsrs	r3, r3, #3
 8001ef6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001efe:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <HAL_RCC_GetClockConfig+0x60>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0207 	and.w	r2, r3, #7
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	601a      	str	r2, [r3, #0]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40022000 	.word	0x40022000

08001f20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f28:	2300      	movs	r3, #0
 8001f2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f2c:	4b2a      	ldr	r3, [pc, #168]	; (8001fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f38:	f7ff f9bc 	bl	80012b4 <HAL_PWREx_GetVoltageRange>
 8001f3c:	6178      	str	r0, [r7, #20]
 8001f3e:	e014      	b.n	8001f6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f40:	4b25      	ldr	r3, [pc, #148]	; (8001fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	4a24      	ldr	r2, [pc, #144]	; (8001fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f4c:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f58:	f7ff f9ac 	bl	80012b4 <HAL_PWREx_GetVoltageRange>
 8001f5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f62:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f70:	d10b      	bne.n	8001f8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b80      	cmp	r3, #128	; 0x80
 8001f76:	d919      	bls.n	8001fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2ba0      	cmp	r3, #160	; 0xa0
 8001f7c:	d902      	bls.n	8001f84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f7e:	2302      	movs	r3, #2
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	e013      	b.n	8001fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f84:	2301      	movs	r3, #1
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	e010      	b.n	8001fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b80      	cmp	r3, #128	; 0x80
 8001f8e:	d902      	bls.n	8001f96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f90:	2303      	movs	r3, #3
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	e00a      	b.n	8001fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b80      	cmp	r3, #128	; 0x80
 8001f9a:	d102      	bne.n	8001fa2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	e004      	b.n	8001fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b70      	cmp	r3, #112	; 0x70
 8001fa6:	d101      	bne.n	8001fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fa8:	2301      	movs	r3, #1
 8001faa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f023 0207 	bic.w	r2, r3, #7
 8001fb4:	4909      	ldr	r1, [pc, #36]	; (8001fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d001      	beq.n	8001fce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40022000 	.word	0x40022000

08001fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fe8:	2300      	movs	r3, #0
 8001fea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fec:	2300      	movs	r3, #0
 8001fee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d041      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002000:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002004:	d02a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002006:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800200a:	d824      	bhi.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800200c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002010:	d008      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002012:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002016:	d81e      	bhi.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00a      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800201c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002020:	d010      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002022:	e018      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002024:	4b86      	ldr	r3, [pc, #536]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4a85      	ldr	r2, [pc, #532]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002030:	e015      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3304      	adds	r3, #4
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f000 fabb 	bl	80025b4 <RCCEx_PLLSAI1_Config>
 800203e:	4603      	mov	r3, r0
 8002040:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002042:	e00c      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3320      	adds	r3, #32
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f000 fba6 	bl	800279c <RCCEx_PLLSAI2_Config>
 8002050:	4603      	mov	r3, r0
 8002052:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002054:	e003      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	74fb      	strb	r3, [r7, #19]
      break;
 800205a:	e000      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800205c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800205e:	7cfb      	ldrb	r3, [r7, #19]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10b      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002064:	4b76      	ldr	r3, [pc, #472]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002072:	4973      	ldr	r1, [pc, #460]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800207a:	e001      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800207c:	7cfb      	ldrb	r3, [r7, #19]
 800207e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d041      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002090:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002094:	d02a      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002096:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800209a:	d824      	bhi.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800209c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020a0:	d008      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020a6:	d81e      	bhi.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b0:	d010      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020b2:	e018      	b.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020b4:	4b62      	ldr	r3, [pc, #392]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4a61      	ldr	r2, [pc, #388]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020c0:	e015      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3304      	adds	r3, #4
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 fa73 	bl	80025b4 <RCCEx_PLLSAI1_Config>
 80020ce:	4603      	mov	r3, r0
 80020d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020d2:	e00c      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3320      	adds	r3, #32
 80020d8:	2100      	movs	r1, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 fb5e 	bl	800279c <RCCEx_PLLSAI2_Config>
 80020e0:	4603      	mov	r3, r0
 80020e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020e4:	e003      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	74fb      	strb	r3, [r7, #19]
      break;
 80020ea:	e000      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020ee:	7cfb      	ldrb	r3, [r7, #19]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10b      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020f4:	4b52      	ldr	r3, [pc, #328]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002102:	494f      	ldr	r1, [pc, #316]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800210a:	e001      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800210c:	7cfb      	ldrb	r3, [r7, #19]
 800210e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80a0 	beq.w	800225e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002122:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002132:	2300      	movs	r3, #0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00d      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002138:	4b41      	ldr	r3, [pc, #260]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213c:	4a40      	ldr	r2, [pc, #256]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002142:	6593      	str	r3, [r2, #88]	; 0x58
 8002144:	4b3e      	ldr	r3, [pc, #248]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002150:	2301      	movs	r3, #1
 8002152:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002154:	4b3b      	ldr	r3, [pc, #236]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a3a      	ldr	r2, [pc, #232]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800215a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002160:	f7fe fde0 	bl	8000d24 <HAL_GetTick>
 8002164:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002166:	e009      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002168:	f7fe fddc 	bl	8000d24 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d902      	bls.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	74fb      	strb	r3, [r7, #19]
        break;
 800217a:	e005      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800217c:	4b31      	ldr	r3, [pc, #196]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0ef      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002188:	7cfb      	ldrb	r3, [r7, #19]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d15c      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800218e:	4b2c      	ldr	r3, [pc, #176]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002198:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01f      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d019      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021ac:	4b24      	ldr	r3, [pc, #144]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021b8:	4b21      	ldr	r3, [pc, #132]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021be:	4a20      	ldr	r2, [pc, #128]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021c8:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ce:	4a1c      	ldr	r2, [pc, #112]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021d8:	4a19      	ldr	r2, [pc, #100]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d016      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ea:	f7fe fd9b 	bl	8000d24 <HAL_GetTick>
 80021ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f0:	e00b      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f2:	f7fe fd97 	bl	8000d24 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002200:	4293      	cmp	r3, r2
 8002202:	d902      	bls.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	74fb      	strb	r3, [r7, #19]
            break;
 8002208:	e006      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0ec      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002218:	7cfb      	ldrb	r3, [r7, #19]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10c      	bne.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800222e:	4904      	ldr	r1, [pc, #16]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002236:	e009      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002238:	7cfb      	ldrb	r3, [r7, #19]
 800223a:	74bb      	strb	r3, [r7, #18]
 800223c:	e006      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002248:	7cfb      	ldrb	r3, [r7, #19]
 800224a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800224c:	7c7b      	ldrb	r3, [r7, #17]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d105      	bne.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002252:	4b9e      	ldr	r3, [pc, #632]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	4a9d      	ldr	r2, [pc, #628]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800225c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800226a:	4b98      	ldr	r3, [pc, #608]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002270:	f023 0203 	bic.w	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002278:	4994      	ldr	r1, [pc, #592]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800228c:	4b8f      	ldr	r3, [pc, #572]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	f023 020c 	bic.w	r2, r3, #12
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229a:	498c      	ldr	r1, [pc, #560]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022ae:	4b87      	ldr	r3, [pc, #540]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	4983      	ldr	r1, [pc, #524]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022d0:	4b7e      	ldr	r3, [pc, #504]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	497b      	ldr	r1, [pc, #492]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022f2:	4b76      	ldr	r3, [pc, #472]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002300:	4972      	ldr	r1, [pc, #456]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00a      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002314:	4b6d      	ldr	r3, [pc, #436]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002322:	496a      	ldr	r1, [pc, #424]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002336:	4b65      	ldr	r3, [pc, #404]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002344:	4961      	ldr	r1, [pc, #388]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00a      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002358:	4b5c      	ldr	r3, [pc, #368]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002366:	4959      	ldr	r1, [pc, #356]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00a      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800237a:	4b54      	ldr	r3, [pc, #336]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002380:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002388:	4950      	ldr	r1, [pc, #320]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800239c:	4b4b      	ldr	r3, [pc, #300]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023aa:	4948      	ldr	r1, [pc, #288]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023be:	4b43      	ldr	r3, [pc, #268]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023cc:	493f      	ldr	r1, [pc, #252]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d028      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023e0:	4b3a      	ldr	r3, [pc, #232]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ee:	4937      	ldr	r1, [pc, #220]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023fe:	d106      	bne.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002400:	4b32      	ldr	r3, [pc, #200]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	4a31      	ldr	r2, [pc, #196]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800240a:	60d3      	str	r3, [r2, #12]
 800240c:	e011      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002412:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002416:	d10c      	bne.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3304      	adds	r3, #4
 800241c:	2101      	movs	r1, #1
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f8c8 	bl	80025b4 <RCCEx_PLLSAI1_Config>
 8002424:	4603      	mov	r3, r0
 8002426:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800242e:	7cfb      	ldrb	r3, [r7, #19]
 8002430:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d028      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800243e:	4b23      	ldr	r3, [pc, #140]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002444:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244c:	491f      	ldr	r1, [pc, #124]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800245c:	d106      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800245e:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	4a1a      	ldr	r2, [pc, #104]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002464:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002468:	60d3      	str	r3, [r2, #12]
 800246a:	e011      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002470:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002474:	d10c      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3304      	adds	r3, #4
 800247a:	2101      	movs	r1, #1
 800247c:	4618      	mov	r0, r3
 800247e:	f000 f899 	bl	80025b4 <RCCEx_PLLSAI1_Config>
 8002482:	4603      	mov	r3, r0
 8002484:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002486:	7cfb      	ldrb	r3, [r7, #19]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800248c:	7cfb      	ldrb	r3, [r7, #19]
 800248e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d02b      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024aa:	4908      	ldr	r1, [pc, #32]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ba:	d109      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a02      	ldr	r2, [pc, #8]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024c6:	60d3      	str	r3, [r2, #12]
 80024c8:	e014      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024d8:	d10c      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3304      	adds	r3, #4
 80024de:	2101      	movs	r1, #1
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 f867 	bl	80025b4 <RCCEx_PLLSAI1_Config>
 80024e6:	4603      	mov	r3, r0
 80024e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ea:	7cfb      	ldrb	r3, [r7, #19]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d02f      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002500:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002506:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800250e:	4928      	ldr	r1, [pc, #160]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800251a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800251e:	d10d      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3304      	adds	r3, #4
 8002524:	2102      	movs	r1, #2
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f844 	bl	80025b4 <RCCEx_PLLSAI1_Config>
 800252c:	4603      	mov	r3, r0
 800252e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002530:	7cfb      	ldrb	r3, [r7, #19]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d014      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002536:	7cfb      	ldrb	r3, [r7, #19]
 8002538:	74bb      	strb	r3, [r7, #18]
 800253a:	e011      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002544:	d10c      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3320      	adds	r3, #32
 800254a:	2102      	movs	r1, #2
 800254c:	4618      	mov	r0, r3
 800254e:	f000 f925 	bl	800279c <RCCEx_PLLSAI2_Config>
 8002552:	4603      	mov	r3, r0
 8002554:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002556:	7cfb      	ldrb	r3, [r7, #19]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800255c:	7cfb      	ldrb	r3, [r7, #19]
 800255e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800256c:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800257a:	490d      	ldr	r1, [pc, #52]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00b      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800258e:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002594:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800259e:	4904      	ldr	r1, [pc, #16]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000

080025b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025c2:	4b75      	ldr	r3, [pc, #468]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d018      	beq.n	8002600 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025ce:	4b72      	ldr	r3, [pc, #456]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f003 0203 	and.w	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d10d      	bne.n	80025fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
       ||
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025e6:	4b6c      	ldr	r3, [pc, #432]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	091b      	lsrs	r3, r3, #4
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
       ||
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d047      	beq.n	800268a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
 80025fe:	e044      	b.n	800268a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b03      	cmp	r3, #3
 8002606:	d018      	beq.n	800263a <RCCEx_PLLSAI1_Config+0x86>
 8002608:	2b03      	cmp	r3, #3
 800260a:	d825      	bhi.n	8002658 <RCCEx_PLLSAI1_Config+0xa4>
 800260c:	2b01      	cmp	r3, #1
 800260e:	d002      	beq.n	8002616 <RCCEx_PLLSAI1_Config+0x62>
 8002610:	2b02      	cmp	r3, #2
 8002612:	d009      	beq.n	8002628 <RCCEx_PLLSAI1_Config+0x74>
 8002614:	e020      	b.n	8002658 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002616:	4b60      	ldr	r3, [pc, #384]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d11d      	bne.n	800265e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002626:	e01a      	b.n	800265e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002628:	4b5b      	ldr	r3, [pc, #364]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002630:	2b00      	cmp	r3, #0
 8002632:	d116      	bne.n	8002662 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002638:	e013      	b.n	8002662 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800263a:	4b57      	ldr	r3, [pc, #348]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10f      	bne.n	8002666 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002646:	4b54      	ldr	r3, [pc, #336]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d109      	bne.n	8002666 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002656:	e006      	b.n	8002666 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
      break;
 800265c:	e004      	b.n	8002668 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800265e:	bf00      	nop
 8002660:	e002      	b.n	8002668 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002662:	bf00      	nop
 8002664:	e000      	b.n	8002668 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002666:	bf00      	nop
    }

    if(status == HAL_OK)
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10d      	bne.n	800268a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800266e:	4b4a      	ldr	r3, [pc, #296]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6819      	ldr	r1, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	430b      	orrs	r3, r1
 8002684:	4944      	ldr	r1, [pc, #272]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002686:	4313      	orrs	r3, r2
 8002688:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d17d      	bne.n	800278c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002690:	4b41      	ldr	r3, [pc, #260]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a40      	ldr	r2, [pc, #256]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002696:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800269a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800269c:	f7fe fb42 	bl	8000d24 <HAL_GetTick>
 80026a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026a2:	e009      	b.n	80026b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026a4:	f7fe fb3e 	bl	8000d24 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d902      	bls.n	80026b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	73fb      	strb	r3, [r7, #15]
        break;
 80026b6:	e005      	b.n	80026c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026b8:	4b37      	ldr	r3, [pc, #220]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1ef      	bne.n	80026a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d160      	bne.n	800278c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d111      	bne.n	80026f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026d0:	4b31      	ldr	r3, [pc, #196]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6892      	ldr	r2, [r2, #8]
 80026e0:	0211      	lsls	r1, r2, #8
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68d2      	ldr	r2, [r2, #12]
 80026e6:	0912      	lsrs	r2, r2, #4
 80026e8:	0452      	lsls	r2, r2, #17
 80026ea:	430a      	orrs	r2, r1
 80026ec:	492a      	ldr	r1, [pc, #168]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	610b      	str	r3, [r1, #16]
 80026f2:	e027      	b.n	8002744 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d112      	bne.n	8002720 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026fa:	4b27      	ldr	r3, [pc, #156]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002702:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6892      	ldr	r2, [r2, #8]
 800270a:	0211      	lsls	r1, r2, #8
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6912      	ldr	r2, [r2, #16]
 8002710:	0852      	lsrs	r2, r2, #1
 8002712:	3a01      	subs	r2, #1
 8002714:	0552      	lsls	r2, r2, #21
 8002716:	430a      	orrs	r2, r1
 8002718:	491f      	ldr	r1, [pc, #124]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800271a:	4313      	orrs	r3, r2
 800271c:	610b      	str	r3, [r1, #16]
 800271e:	e011      	b.n	8002744 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002728:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6892      	ldr	r2, [r2, #8]
 8002730:	0211      	lsls	r1, r2, #8
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6952      	ldr	r2, [r2, #20]
 8002736:	0852      	lsrs	r2, r2, #1
 8002738:	3a01      	subs	r2, #1
 800273a:	0652      	lsls	r2, r2, #25
 800273c:	430a      	orrs	r2, r1
 800273e:	4916      	ldr	r1, [pc, #88]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002740:	4313      	orrs	r3, r2
 8002742:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002744:	4b14      	ldr	r3, [pc, #80]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a13      	ldr	r2, [pc, #76]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800274a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800274e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7fe fae8 	bl	8000d24 <HAL_GetTick>
 8002754:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002756:	e009      	b.n	800276c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002758:	f7fe fae4 	bl	8000d24 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d902      	bls.n	800276c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	73fb      	strb	r3, [r7, #15]
          break;
 800276a:	e005      	b.n	8002778 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0ef      	beq.n	8002758 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002780:	691a      	ldr	r2, [r3, #16]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	4904      	ldr	r1, [pc, #16]	; (8002798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002788:	4313      	orrs	r3, r2
 800278a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800278c:	7bfb      	ldrb	r3, [r7, #15]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000

0800279c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027aa:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d018      	beq.n	80027e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027b6:	4b67      	ldr	r3, [pc, #412]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f003 0203 	and.w	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d10d      	bne.n	80027e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
       ||
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d009      	beq.n	80027e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027ce:	4b61      	ldr	r3, [pc, #388]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	091b      	lsrs	r3, r3, #4
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
       ||
 80027de:	429a      	cmp	r2, r3
 80027e0:	d047      	beq.n	8002872 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
 80027e6:	e044      	b.n	8002872 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d018      	beq.n	8002822 <RCCEx_PLLSAI2_Config+0x86>
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d825      	bhi.n	8002840 <RCCEx_PLLSAI2_Config+0xa4>
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d002      	beq.n	80027fe <RCCEx_PLLSAI2_Config+0x62>
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d009      	beq.n	8002810 <RCCEx_PLLSAI2_Config+0x74>
 80027fc:	e020      	b.n	8002840 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027fe:	4b55      	ldr	r3, [pc, #340]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d11d      	bne.n	8002846 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800280e:	e01a      	b.n	8002846 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002810:	4b50      	ldr	r3, [pc, #320]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002818:	2b00      	cmp	r3, #0
 800281a:	d116      	bne.n	800284a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002820:	e013      	b.n	800284a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002822:	4b4c      	ldr	r3, [pc, #304]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10f      	bne.n	800284e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800282e:	4b49      	ldr	r3, [pc, #292]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d109      	bne.n	800284e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800283e:	e006      	b.n	800284e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
      break;
 8002844:	e004      	b.n	8002850 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002846:	bf00      	nop
 8002848:	e002      	b.n	8002850 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800284a:	bf00      	nop
 800284c:	e000      	b.n	8002850 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800284e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10d      	bne.n	8002872 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002856:	4b3f      	ldr	r3, [pc, #252]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6819      	ldr	r1, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	3b01      	subs	r3, #1
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	430b      	orrs	r3, r1
 800286c:	4939      	ldr	r1, [pc, #228]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800286e:	4313      	orrs	r3, r2
 8002870:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d167      	bne.n	8002948 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002878:	4b36      	ldr	r3, [pc, #216]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a35      	ldr	r2, [pc, #212]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002884:	f7fe fa4e 	bl	8000d24 <HAL_GetTick>
 8002888:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800288a:	e009      	b.n	80028a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800288c:	f7fe fa4a 	bl	8000d24 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d902      	bls.n	80028a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	73fb      	strb	r3, [r7, #15]
        break;
 800289e:	e005      	b.n	80028ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028a0:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1ef      	bne.n	800288c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d14a      	bne.n	8002948 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d111      	bne.n	80028dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028b8:	4b26      	ldr	r3, [pc, #152]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6892      	ldr	r2, [r2, #8]
 80028c8:	0211      	lsls	r1, r2, #8
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68d2      	ldr	r2, [r2, #12]
 80028ce:	0912      	lsrs	r2, r2, #4
 80028d0:	0452      	lsls	r2, r2, #17
 80028d2:	430a      	orrs	r2, r1
 80028d4:	491f      	ldr	r1, [pc, #124]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	614b      	str	r3, [r1, #20]
 80028da:	e011      	b.n	8002900 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028dc:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6892      	ldr	r2, [r2, #8]
 80028ec:	0211      	lsls	r1, r2, #8
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6912      	ldr	r2, [r2, #16]
 80028f2:	0852      	lsrs	r2, r2, #1
 80028f4:	3a01      	subs	r2, #1
 80028f6:	0652      	lsls	r2, r2, #25
 80028f8:	430a      	orrs	r2, r1
 80028fa:	4916      	ldr	r1, [pc, #88]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002900:	4b14      	ldr	r3, [pc, #80]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a13      	ldr	r2, [pc, #76]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7fe fa0a 	bl	8000d24 <HAL_GetTick>
 8002910:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002912:	e009      	b.n	8002928 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002914:	f7fe fa06 	bl	8000d24 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d902      	bls.n	8002928 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	73fb      	strb	r3, [r7, #15]
          break;
 8002926:	e005      	b.n	8002934 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0ef      	beq.n	8002914 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	4904      	ldr	r1, [pc, #16]	; (8002954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002944:	4313      	orrs	r3, r2
 8002946:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000

08002958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e049      	b.n	80029fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f841 	bl	8002a06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3304      	adds	r3, #4
 8002994:	4619      	mov	r1, r3
 8002996:	4610      	mov	r0, r2
 8002998:	f000 f9f8 	bl	8002d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d001      	beq.n	8002a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e04f      	b.n	8002ad4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a23      	ldr	r2, [pc, #140]	; (8002ae0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01d      	beq.n	8002a92 <HAL_TIM_Base_Start_IT+0x76>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5e:	d018      	beq.n	8002a92 <HAL_TIM_Base_Start_IT+0x76>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1f      	ldr	r2, [pc, #124]	; (8002ae4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_TIM_Base_Start_IT+0x76>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ae8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d00e      	beq.n	8002a92 <HAL_TIM_Base_Start_IT+0x76>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <HAL_TIM_Base_Start_IT+0xd0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d009      	beq.n	8002a92 <HAL_TIM_Base_Start_IT+0x76>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d004      	beq.n	8002a92 <HAL_TIM_Base_Start_IT+0x76>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d115      	bne.n	8002abe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2b06      	cmp	r3, #6
 8002aa2:	d015      	beq.n	8002ad0 <HAL_TIM_Base_Start_IT+0xb4>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aaa:	d011      	beq.n	8002ad0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002abc:	e008      	b.n	8002ad0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0201 	orr.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e000      	b.n	8002ad2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	40012c00 	.word	0x40012c00
 8002ae4:	40000400 	.word	0x40000400
 8002ae8:	40000800 	.word	0x40000800
 8002aec:	40000c00 	.word	0x40000c00
 8002af0:	40013400 	.word	0x40013400
 8002af4:	40014000 	.word	0x40014000
 8002af8:	00010007 	.word	0x00010007

08002afc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d122      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d11b      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0202 	mvn.w	r2, #2
 8002b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f905 	bl	8002d4e <HAL_TIM_IC_CaptureCallback>
 8002b44:	e005      	b.n	8002b52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f8f7 	bl	8002d3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f908 	bl	8002d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d122      	bne.n	8002bac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d11b      	bne.n	8002bac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0204 	mvn.w	r2, #4
 8002b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f8db 	bl	8002d4e <HAL_TIM_IC_CaptureCallback>
 8002b98:	e005      	b.n	8002ba6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f8cd 	bl	8002d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f8de 	bl	8002d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d122      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d11b      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0208 	mvn.w	r2, #8
 8002bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f8b1 	bl	8002d4e <HAL_TIM_IC_CaptureCallback>
 8002bec:	e005      	b.n	8002bfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f8a3 	bl	8002d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f8b4 	bl	8002d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b10      	cmp	r3, #16
 8002c0c:	d122      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b10      	cmp	r3, #16
 8002c1a:	d11b      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0210 	mvn.w	r2, #16
 8002c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2208      	movs	r2, #8
 8002c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f887 	bl	8002d4e <HAL_TIM_IC_CaptureCallback>
 8002c40:	e005      	b.n	8002c4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f879 	bl	8002d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f88a 	bl	8002d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d10e      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d107      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0201 	mvn.w	r2, #1
 8002c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fd fec0 	bl	8000a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8a:	2b80      	cmp	r3, #128	; 0x80
 8002c8c:	d10e      	bne.n	8002cac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c98:	2b80      	cmp	r3, #128	; 0x80
 8002c9a:	d107      	bne.n	8002cac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f914 	bl	8002ed4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cba:	d10e      	bne.n	8002cda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc6:	2b80      	cmp	r3, #128	; 0x80
 8002cc8:	d107      	bne.n	8002cda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f907 	bl	8002ee8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce4:	2b40      	cmp	r3, #64	; 0x40
 8002ce6:	d10e      	bne.n	8002d06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf2:	2b40      	cmp	r3, #64	; 0x40
 8002cf4:	d107      	bne.n	8002d06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f838 	bl	8002d76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	d10e      	bne.n	8002d32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	d107      	bne.n	8002d32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f06f 0220 	mvn.w	r2, #32
 8002d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f8c7 	bl	8002ec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a40      	ldr	r2, [pc, #256]	; (8002ea0 <TIM_Base_SetConfig+0x114>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d013      	beq.n	8002dcc <TIM_Base_SetConfig+0x40>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002daa:	d00f      	beq.n	8002dcc <TIM_Base_SetConfig+0x40>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a3d      	ldr	r2, [pc, #244]	; (8002ea4 <TIM_Base_SetConfig+0x118>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00b      	beq.n	8002dcc <TIM_Base_SetConfig+0x40>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a3c      	ldr	r2, [pc, #240]	; (8002ea8 <TIM_Base_SetConfig+0x11c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d007      	beq.n	8002dcc <TIM_Base_SetConfig+0x40>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a3b      	ldr	r2, [pc, #236]	; (8002eac <TIM_Base_SetConfig+0x120>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d003      	beq.n	8002dcc <TIM_Base_SetConfig+0x40>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a3a      	ldr	r2, [pc, #232]	; (8002eb0 <TIM_Base_SetConfig+0x124>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d108      	bne.n	8002dde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a2f      	ldr	r2, [pc, #188]	; (8002ea0 <TIM_Base_SetConfig+0x114>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d01f      	beq.n	8002e26 <TIM_Base_SetConfig+0x9a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dec:	d01b      	beq.n	8002e26 <TIM_Base_SetConfig+0x9a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a2c      	ldr	r2, [pc, #176]	; (8002ea4 <TIM_Base_SetConfig+0x118>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d017      	beq.n	8002e26 <TIM_Base_SetConfig+0x9a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a2b      	ldr	r2, [pc, #172]	; (8002ea8 <TIM_Base_SetConfig+0x11c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d013      	beq.n	8002e26 <TIM_Base_SetConfig+0x9a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a2a      	ldr	r2, [pc, #168]	; (8002eac <TIM_Base_SetConfig+0x120>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00f      	beq.n	8002e26 <TIM_Base_SetConfig+0x9a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <TIM_Base_SetConfig+0x124>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00b      	beq.n	8002e26 <TIM_Base_SetConfig+0x9a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a28      	ldr	r2, [pc, #160]	; (8002eb4 <TIM_Base_SetConfig+0x128>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d007      	beq.n	8002e26 <TIM_Base_SetConfig+0x9a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a27      	ldr	r2, [pc, #156]	; (8002eb8 <TIM_Base_SetConfig+0x12c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d003      	beq.n	8002e26 <TIM_Base_SetConfig+0x9a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a26      	ldr	r2, [pc, #152]	; (8002ebc <TIM_Base_SetConfig+0x130>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d108      	bne.n	8002e38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a10      	ldr	r2, [pc, #64]	; (8002ea0 <TIM_Base_SetConfig+0x114>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00f      	beq.n	8002e84 <TIM_Base_SetConfig+0xf8>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a12      	ldr	r2, [pc, #72]	; (8002eb0 <TIM_Base_SetConfig+0x124>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00b      	beq.n	8002e84 <TIM_Base_SetConfig+0xf8>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a11      	ldr	r2, [pc, #68]	; (8002eb4 <TIM_Base_SetConfig+0x128>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d007      	beq.n	8002e84 <TIM_Base_SetConfig+0xf8>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a10      	ldr	r2, [pc, #64]	; (8002eb8 <TIM_Base_SetConfig+0x12c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d003      	beq.n	8002e84 <TIM_Base_SetConfig+0xf8>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a0f      	ldr	r2, [pc, #60]	; (8002ebc <TIM_Base_SetConfig+0x130>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d103      	bne.n	8002e8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	615a      	str	r2, [r3, #20]
}
 8002e92:	bf00      	nop
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40012c00 	.word	0x40012c00
 8002ea4:	40000400 	.word	0x40000400
 8002ea8:	40000800 	.word	0x40000800
 8002eac:	40000c00 	.word	0x40000c00
 8002eb0:	40013400 	.word	0x40013400
 8002eb4:	40014000 	.word	0x40014000
 8002eb8:	40014400 	.word	0x40014400
 8002ebc:	40014800 	.word	0x40014800

08002ec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e040      	b.n	8002f90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d106      	bne.n	8002f24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7fd fdae 	bl	8000a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2224      	movs	r2, #36	; 0x24
 8002f28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0201 	bic.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f8c0 	bl	80030c0 <UART_SetConfig>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e022      	b.n	8002f90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fb6c 	bl	8003630 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 fbf3 	bl	8003774 <UART_CheckIdleState>
 8002f8e:	4603      	mov	r3, r0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08a      	sub	sp, #40	; 0x28
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	f040 8082 	bne.w	80030b6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_UART_Transmit+0x26>
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e07a      	b.n	80030b8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_UART_Transmit+0x38>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e073      	b.n	80030b8 <HAL_UART_Transmit+0x120>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2221      	movs	r2, #33	; 0x21
 8002fe4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fe6:	f7fd fe9d 	bl	8000d24 <HAL_GetTick>
 8002fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	88fa      	ldrh	r2, [r7, #6]
 8002ff0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	88fa      	ldrh	r2, [r7, #6]
 8002ff8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003004:	d108      	bne.n	8003018 <HAL_UART_Transmit+0x80>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d104      	bne.n	8003018 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	e003      	b.n	8003020 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800301c:	2300      	movs	r3, #0
 800301e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003028:	e02d      	b.n	8003086 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2200      	movs	r2, #0
 8003032:	2180      	movs	r1, #128	; 0x80
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fbe6 	bl	8003806 <UART_WaitOnFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e039      	b.n	80030b8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10b      	bne.n	8003062 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	881a      	ldrh	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003056:	b292      	uxth	r2, r2
 8003058:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	3302      	adds	r3, #2
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	e008      	b.n	8003074 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	781a      	ldrb	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	b292      	uxth	r2, r2
 800306c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3301      	adds	r3, #1
 8003072:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1cb      	bne.n	800302a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2200      	movs	r2, #0
 800309a:	2140      	movs	r1, #64	; 0x40
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fbb2 	bl	8003806 <UART_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e005      	b.n	80030b8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
  }
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c4:	b08a      	sub	sp, #40	; 0x28
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	431a      	orrs	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	431a      	orrs	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	4ba4      	ldr	r3, [pc, #656]	; (8003380 <UART_SetConfig+0x2c0>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030f8:	430b      	orrs	r3, r1
 80030fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a99      	ldr	r2, [pc, #612]	; (8003384 <UART_SetConfig+0x2c4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d004      	beq.n	800312c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003128:	4313      	orrs	r3, r2
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313c:	430a      	orrs	r2, r1
 800313e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a90      	ldr	r2, [pc, #576]	; (8003388 <UART_SetConfig+0x2c8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d126      	bne.n	8003198 <UART_SetConfig+0xd8>
 800314a:	4b90      	ldr	r3, [pc, #576]	; (800338c <UART_SetConfig+0x2cc>)
 800314c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	2b03      	cmp	r3, #3
 8003156:	d81b      	bhi.n	8003190 <UART_SetConfig+0xd0>
 8003158:	a201      	add	r2, pc, #4	; (adr r2, 8003160 <UART_SetConfig+0xa0>)
 800315a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315e:	bf00      	nop
 8003160:	08003171 	.word	0x08003171
 8003164:	08003181 	.word	0x08003181
 8003168:	08003179 	.word	0x08003179
 800316c:	08003189 	.word	0x08003189
 8003170:	2301      	movs	r3, #1
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003176:	e116      	b.n	80033a6 <UART_SetConfig+0x2e6>
 8003178:	2302      	movs	r3, #2
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317e:	e112      	b.n	80033a6 <UART_SetConfig+0x2e6>
 8003180:	2304      	movs	r3, #4
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003186:	e10e      	b.n	80033a6 <UART_SetConfig+0x2e6>
 8003188:	2308      	movs	r3, #8
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318e:	e10a      	b.n	80033a6 <UART_SetConfig+0x2e6>
 8003190:	2310      	movs	r3, #16
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003196:	e106      	b.n	80033a6 <UART_SetConfig+0x2e6>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a7c      	ldr	r2, [pc, #496]	; (8003390 <UART_SetConfig+0x2d0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d138      	bne.n	8003214 <UART_SetConfig+0x154>
 80031a2:	4b7a      	ldr	r3, [pc, #488]	; (800338c <UART_SetConfig+0x2cc>)
 80031a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a8:	f003 030c 	and.w	r3, r3, #12
 80031ac:	2b0c      	cmp	r3, #12
 80031ae:	d82d      	bhi.n	800320c <UART_SetConfig+0x14c>
 80031b0:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <UART_SetConfig+0xf8>)
 80031b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b6:	bf00      	nop
 80031b8:	080031ed 	.word	0x080031ed
 80031bc:	0800320d 	.word	0x0800320d
 80031c0:	0800320d 	.word	0x0800320d
 80031c4:	0800320d 	.word	0x0800320d
 80031c8:	080031fd 	.word	0x080031fd
 80031cc:	0800320d 	.word	0x0800320d
 80031d0:	0800320d 	.word	0x0800320d
 80031d4:	0800320d 	.word	0x0800320d
 80031d8:	080031f5 	.word	0x080031f5
 80031dc:	0800320d 	.word	0x0800320d
 80031e0:	0800320d 	.word	0x0800320d
 80031e4:	0800320d 	.word	0x0800320d
 80031e8:	08003205 	.word	0x08003205
 80031ec:	2300      	movs	r3, #0
 80031ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f2:	e0d8      	b.n	80033a6 <UART_SetConfig+0x2e6>
 80031f4:	2302      	movs	r3, #2
 80031f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fa:	e0d4      	b.n	80033a6 <UART_SetConfig+0x2e6>
 80031fc:	2304      	movs	r3, #4
 80031fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003202:	e0d0      	b.n	80033a6 <UART_SetConfig+0x2e6>
 8003204:	2308      	movs	r3, #8
 8003206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320a:	e0cc      	b.n	80033a6 <UART_SetConfig+0x2e6>
 800320c:	2310      	movs	r3, #16
 800320e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003212:	e0c8      	b.n	80033a6 <UART_SetConfig+0x2e6>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a5e      	ldr	r2, [pc, #376]	; (8003394 <UART_SetConfig+0x2d4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d125      	bne.n	800326a <UART_SetConfig+0x1aa>
 800321e:	4b5b      	ldr	r3, [pc, #364]	; (800338c <UART_SetConfig+0x2cc>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003224:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003228:	2b30      	cmp	r3, #48	; 0x30
 800322a:	d016      	beq.n	800325a <UART_SetConfig+0x19a>
 800322c:	2b30      	cmp	r3, #48	; 0x30
 800322e:	d818      	bhi.n	8003262 <UART_SetConfig+0x1a2>
 8003230:	2b20      	cmp	r3, #32
 8003232:	d00a      	beq.n	800324a <UART_SetConfig+0x18a>
 8003234:	2b20      	cmp	r3, #32
 8003236:	d814      	bhi.n	8003262 <UART_SetConfig+0x1a2>
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <UART_SetConfig+0x182>
 800323c:	2b10      	cmp	r3, #16
 800323e:	d008      	beq.n	8003252 <UART_SetConfig+0x192>
 8003240:	e00f      	b.n	8003262 <UART_SetConfig+0x1a2>
 8003242:	2300      	movs	r3, #0
 8003244:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003248:	e0ad      	b.n	80033a6 <UART_SetConfig+0x2e6>
 800324a:	2302      	movs	r3, #2
 800324c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003250:	e0a9      	b.n	80033a6 <UART_SetConfig+0x2e6>
 8003252:	2304      	movs	r3, #4
 8003254:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003258:	e0a5      	b.n	80033a6 <UART_SetConfig+0x2e6>
 800325a:	2308      	movs	r3, #8
 800325c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003260:	e0a1      	b.n	80033a6 <UART_SetConfig+0x2e6>
 8003262:	2310      	movs	r3, #16
 8003264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003268:	e09d      	b.n	80033a6 <UART_SetConfig+0x2e6>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a4a      	ldr	r2, [pc, #296]	; (8003398 <UART_SetConfig+0x2d8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d125      	bne.n	80032c0 <UART_SetConfig+0x200>
 8003274:	4b45      	ldr	r3, [pc, #276]	; (800338c <UART_SetConfig+0x2cc>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800327e:	2bc0      	cmp	r3, #192	; 0xc0
 8003280:	d016      	beq.n	80032b0 <UART_SetConfig+0x1f0>
 8003282:	2bc0      	cmp	r3, #192	; 0xc0
 8003284:	d818      	bhi.n	80032b8 <UART_SetConfig+0x1f8>
 8003286:	2b80      	cmp	r3, #128	; 0x80
 8003288:	d00a      	beq.n	80032a0 <UART_SetConfig+0x1e0>
 800328a:	2b80      	cmp	r3, #128	; 0x80
 800328c:	d814      	bhi.n	80032b8 <UART_SetConfig+0x1f8>
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <UART_SetConfig+0x1d8>
 8003292:	2b40      	cmp	r3, #64	; 0x40
 8003294:	d008      	beq.n	80032a8 <UART_SetConfig+0x1e8>
 8003296:	e00f      	b.n	80032b8 <UART_SetConfig+0x1f8>
 8003298:	2300      	movs	r3, #0
 800329a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800329e:	e082      	b.n	80033a6 <UART_SetConfig+0x2e6>
 80032a0:	2302      	movs	r3, #2
 80032a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a6:	e07e      	b.n	80033a6 <UART_SetConfig+0x2e6>
 80032a8:	2304      	movs	r3, #4
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ae:	e07a      	b.n	80033a6 <UART_SetConfig+0x2e6>
 80032b0:	2308      	movs	r3, #8
 80032b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b6:	e076      	b.n	80033a6 <UART_SetConfig+0x2e6>
 80032b8:	2310      	movs	r3, #16
 80032ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032be:	e072      	b.n	80033a6 <UART_SetConfig+0x2e6>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a35      	ldr	r2, [pc, #212]	; (800339c <UART_SetConfig+0x2dc>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d12a      	bne.n	8003320 <UART_SetConfig+0x260>
 80032ca:	4b30      	ldr	r3, [pc, #192]	; (800338c <UART_SetConfig+0x2cc>)
 80032cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032d8:	d01a      	beq.n	8003310 <UART_SetConfig+0x250>
 80032da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032de:	d81b      	bhi.n	8003318 <UART_SetConfig+0x258>
 80032e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e4:	d00c      	beq.n	8003300 <UART_SetConfig+0x240>
 80032e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ea:	d815      	bhi.n	8003318 <UART_SetConfig+0x258>
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <UART_SetConfig+0x238>
 80032f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f4:	d008      	beq.n	8003308 <UART_SetConfig+0x248>
 80032f6:	e00f      	b.n	8003318 <UART_SetConfig+0x258>
 80032f8:	2300      	movs	r3, #0
 80032fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fe:	e052      	b.n	80033a6 <UART_SetConfig+0x2e6>
 8003300:	2302      	movs	r3, #2
 8003302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003306:	e04e      	b.n	80033a6 <UART_SetConfig+0x2e6>
 8003308:	2304      	movs	r3, #4
 800330a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330e:	e04a      	b.n	80033a6 <UART_SetConfig+0x2e6>
 8003310:	2308      	movs	r3, #8
 8003312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003316:	e046      	b.n	80033a6 <UART_SetConfig+0x2e6>
 8003318:	2310      	movs	r3, #16
 800331a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331e:	e042      	b.n	80033a6 <UART_SetConfig+0x2e6>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a17      	ldr	r2, [pc, #92]	; (8003384 <UART_SetConfig+0x2c4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d13a      	bne.n	80033a0 <UART_SetConfig+0x2e0>
 800332a:	4b18      	ldr	r3, [pc, #96]	; (800338c <UART_SetConfig+0x2cc>)
 800332c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003330:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003334:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003338:	d01a      	beq.n	8003370 <UART_SetConfig+0x2b0>
 800333a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800333e:	d81b      	bhi.n	8003378 <UART_SetConfig+0x2b8>
 8003340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003344:	d00c      	beq.n	8003360 <UART_SetConfig+0x2a0>
 8003346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800334a:	d815      	bhi.n	8003378 <UART_SetConfig+0x2b8>
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <UART_SetConfig+0x298>
 8003350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003354:	d008      	beq.n	8003368 <UART_SetConfig+0x2a8>
 8003356:	e00f      	b.n	8003378 <UART_SetConfig+0x2b8>
 8003358:	2300      	movs	r3, #0
 800335a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800335e:	e022      	b.n	80033a6 <UART_SetConfig+0x2e6>
 8003360:	2302      	movs	r3, #2
 8003362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003366:	e01e      	b.n	80033a6 <UART_SetConfig+0x2e6>
 8003368:	2304      	movs	r3, #4
 800336a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800336e:	e01a      	b.n	80033a6 <UART_SetConfig+0x2e6>
 8003370:	2308      	movs	r3, #8
 8003372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003376:	e016      	b.n	80033a6 <UART_SetConfig+0x2e6>
 8003378:	2310      	movs	r3, #16
 800337a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800337e:	e012      	b.n	80033a6 <UART_SetConfig+0x2e6>
 8003380:	efff69f3 	.word	0xefff69f3
 8003384:	40008000 	.word	0x40008000
 8003388:	40013800 	.word	0x40013800
 800338c:	40021000 	.word	0x40021000
 8003390:	40004400 	.word	0x40004400
 8003394:	40004800 	.word	0x40004800
 8003398:	40004c00 	.word	0x40004c00
 800339c:	40005000 	.word	0x40005000
 80033a0:	2310      	movs	r3, #16
 80033a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a9f      	ldr	r2, [pc, #636]	; (8003628 <UART_SetConfig+0x568>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d17a      	bne.n	80034a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d824      	bhi.n	8003402 <UART_SetConfig+0x342>
 80033b8:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <UART_SetConfig+0x300>)
 80033ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033be:	bf00      	nop
 80033c0:	080033e5 	.word	0x080033e5
 80033c4:	08003403 	.word	0x08003403
 80033c8:	080033ed 	.word	0x080033ed
 80033cc:	08003403 	.word	0x08003403
 80033d0:	080033f3 	.word	0x080033f3
 80033d4:	08003403 	.word	0x08003403
 80033d8:	08003403 	.word	0x08003403
 80033dc:	08003403 	.word	0x08003403
 80033e0:	080033fb 	.word	0x080033fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033e4:	f7fe fd3e 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 80033e8:	61f8      	str	r0, [r7, #28]
        break;
 80033ea:	e010      	b.n	800340e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033ec:	4b8f      	ldr	r3, [pc, #572]	; (800362c <UART_SetConfig+0x56c>)
 80033ee:	61fb      	str	r3, [r7, #28]
        break;
 80033f0:	e00d      	b.n	800340e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033f2:	f7fe fc9f 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 80033f6:	61f8      	str	r0, [r7, #28]
        break;
 80033f8:	e009      	b.n	800340e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033fe:	61fb      	str	r3, [r7, #28]
        break;
 8003400:	e005      	b.n	800340e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800340c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80fb 	beq.w	800360c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	429a      	cmp	r2, r3
 8003424:	d305      	bcc.n	8003432 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	429a      	cmp	r2, r3
 8003430:	d903      	bls.n	800343a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003438:	e0e8      	b.n	800360c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	2200      	movs	r2, #0
 800343e:	461c      	mov	r4, r3
 8003440:	4615      	mov	r5, r2
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	022b      	lsls	r3, r5, #8
 800344c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003450:	0222      	lsls	r2, r4, #8
 8003452:	68f9      	ldr	r1, [r7, #12]
 8003454:	6849      	ldr	r1, [r1, #4]
 8003456:	0849      	lsrs	r1, r1, #1
 8003458:	2000      	movs	r0, #0
 800345a:	4688      	mov	r8, r1
 800345c:	4681      	mov	r9, r0
 800345e:	eb12 0a08 	adds.w	sl, r2, r8
 8003462:	eb43 0b09 	adc.w	fp, r3, r9
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	603b      	str	r3, [r7, #0]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003474:	4650      	mov	r0, sl
 8003476:	4659      	mov	r1, fp
 8003478:	f7fc feb2 	bl	80001e0 <__aeabi_uldivmod>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4613      	mov	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800348a:	d308      	bcc.n	800349e <UART_SetConfig+0x3de>
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003492:	d204      	bcs.n	800349e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	60da      	str	r2, [r3, #12]
 800349c:	e0b6      	b.n	800360c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034a4:	e0b2      	b.n	800360c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ae:	d15e      	bne.n	800356e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80034b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d828      	bhi.n	800350a <UART_SetConfig+0x44a>
 80034b8:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <UART_SetConfig+0x400>)
 80034ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034be:	bf00      	nop
 80034c0:	080034e5 	.word	0x080034e5
 80034c4:	080034ed 	.word	0x080034ed
 80034c8:	080034f5 	.word	0x080034f5
 80034cc:	0800350b 	.word	0x0800350b
 80034d0:	080034fb 	.word	0x080034fb
 80034d4:	0800350b 	.word	0x0800350b
 80034d8:	0800350b 	.word	0x0800350b
 80034dc:	0800350b 	.word	0x0800350b
 80034e0:	08003503 	.word	0x08003503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034e4:	f7fe fcbe 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 80034e8:	61f8      	str	r0, [r7, #28]
        break;
 80034ea:	e014      	b.n	8003516 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034ec:	f7fe fcd0 	bl	8001e90 <HAL_RCC_GetPCLK2Freq>
 80034f0:	61f8      	str	r0, [r7, #28]
        break;
 80034f2:	e010      	b.n	8003516 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034f4:	4b4d      	ldr	r3, [pc, #308]	; (800362c <UART_SetConfig+0x56c>)
 80034f6:	61fb      	str	r3, [r7, #28]
        break;
 80034f8:	e00d      	b.n	8003516 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034fa:	f7fe fc1b 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 80034fe:	61f8      	str	r0, [r7, #28]
        break;
 8003500:	e009      	b.n	8003516 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003506:	61fb      	str	r3, [r7, #28]
        break;
 8003508:	e005      	b.n	8003516 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003514:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d077      	beq.n	800360c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	005a      	lsls	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	085b      	lsrs	r3, r3, #1
 8003526:	441a      	add	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	2b0f      	cmp	r3, #15
 8003536:	d916      	bls.n	8003566 <UART_SetConfig+0x4a6>
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353e:	d212      	bcs.n	8003566 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	b29b      	uxth	r3, r3
 8003544:	f023 030f 	bic.w	r3, r3, #15
 8003548:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	085b      	lsrs	r3, r3, #1
 800354e:	b29b      	uxth	r3, r3
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	b29a      	uxth	r2, r3
 8003556:	8afb      	ldrh	r3, [r7, #22]
 8003558:	4313      	orrs	r3, r2
 800355a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	8afa      	ldrh	r2, [r7, #22]
 8003562:	60da      	str	r2, [r3, #12]
 8003564:	e052      	b.n	800360c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800356c:	e04e      	b.n	800360c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800356e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003572:	2b08      	cmp	r3, #8
 8003574:	d827      	bhi.n	80035c6 <UART_SetConfig+0x506>
 8003576:	a201      	add	r2, pc, #4	; (adr r2, 800357c <UART_SetConfig+0x4bc>)
 8003578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357c:	080035a1 	.word	0x080035a1
 8003580:	080035a9 	.word	0x080035a9
 8003584:	080035b1 	.word	0x080035b1
 8003588:	080035c7 	.word	0x080035c7
 800358c:	080035b7 	.word	0x080035b7
 8003590:	080035c7 	.word	0x080035c7
 8003594:	080035c7 	.word	0x080035c7
 8003598:	080035c7 	.word	0x080035c7
 800359c:	080035bf 	.word	0x080035bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a0:	f7fe fc60 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 80035a4:	61f8      	str	r0, [r7, #28]
        break;
 80035a6:	e014      	b.n	80035d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035a8:	f7fe fc72 	bl	8001e90 <HAL_RCC_GetPCLK2Freq>
 80035ac:	61f8      	str	r0, [r7, #28]
        break;
 80035ae:	e010      	b.n	80035d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035b0:	4b1e      	ldr	r3, [pc, #120]	; (800362c <UART_SetConfig+0x56c>)
 80035b2:	61fb      	str	r3, [r7, #28]
        break;
 80035b4:	e00d      	b.n	80035d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035b6:	f7fe fbbd 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 80035ba:	61f8      	str	r0, [r7, #28]
        break;
 80035bc:	e009      	b.n	80035d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035c2:	61fb      	str	r3, [r7, #28]
        break;
 80035c4:	e005      	b.n	80035d2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80035d0:	bf00      	nop
    }

    if (pclk != 0U)
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d019      	beq.n	800360c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	085a      	lsrs	r2, r3, #1
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	441a      	add	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	2b0f      	cmp	r3, #15
 80035f0:	d909      	bls.n	8003606 <UART_SetConfig+0x546>
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f8:	d205      	bcs.n	8003606 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60da      	str	r2, [r3, #12]
 8003604:	e002      	b.n	800360c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003618:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800361c:	4618      	mov	r0, r3
 800361e:	3728      	adds	r7, #40	; 0x28
 8003620:	46bd      	mov	sp, r7
 8003622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003626:	bf00      	nop
 8003628:	40008000 	.word	0x40008000
 800362c:	00f42400 	.word	0x00f42400

08003630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01a      	beq.n	8003746 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800372e:	d10a      	bne.n	8003746 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	605a      	str	r2, [r3, #4]
  }
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af02      	add	r7, sp, #8
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003784:	f7fd face 	bl	8000d24 <HAL_GetTick>
 8003788:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	2b08      	cmp	r3, #8
 8003796:	d10e      	bne.n	80037b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003798:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f82d 	bl	8003806 <UART_WaitOnFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e023      	b.n	80037fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d10e      	bne.n	80037e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f817 	bl	8003806 <UART_WaitOnFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e00d      	b.n	80037fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b09c      	sub	sp, #112	; 0x70
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	603b      	str	r3, [r7, #0]
 8003812:	4613      	mov	r3, r2
 8003814:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003816:	e0a5      	b.n	8003964 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381e:	f000 80a1 	beq.w	8003964 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003822:	f7fd fa7f 	bl	8000d24 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800382e:	429a      	cmp	r2, r3
 8003830:	d302      	bcc.n	8003838 <UART_WaitOnFlagUntilTimeout+0x32>
 8003832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003834:	2b00      	cmp	r3, #0
 8003836:	d13e      	bne.n	80038b6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003848:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800384c:	667b      	str	r3, [r7, #100]	; 0x64
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003856:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003858:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800385c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e6      	bne.n	8003838 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3308      	adds	r3, #8
 8003870:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800387a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387c:	f023 0301 	bic.w	r3, r3, #1
 8003880:	663b      	str	r3, [r7, #96]	; 0x60
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3308      	adds	r3, #8
 8003888:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800388a:	64ba      	str	r2, [r7, #72]	; 0x48
 800388c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003890:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003892:	e841 2300 	strex	r3, r2, [r1]
 8003896:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1e5      	bne.n	800386a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e067      	b.n	8003986 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d04f      	beq.n	8003964 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d2:	d147      	bne.n	8003964 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038dc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e6:	e853 3f00 	ldrex	r3, [r3]
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038fc:	637b      	str	r3, [r7, #52]	; 0x34
 80038fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003904:	e841 2300 	strex	r3, r2, [r1]
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800390a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e6      	bne.n	80038de <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3308      	adds	r3, #8
 8003916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	e853 3f00 	ldrex	r3, [r3]
 800391e:	613b      	str	r3, [r7, #16]
   return(result);
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f023 0301 	bic.w	r3, r3, #1
 8003926:	66bb      	str	r3, [r7, #104]	; 0x68
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3308      	adds	r3, #8
 800392e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003930:	623a      	str	r2, [r7, #32]
 8003932:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003934:	69f9      	ldr	r1, [r7, #28]
 8003936:	6a3a      	ldr	r2, [r7, #32]
 8003938:	e841 2300 	strex	r3, r2, [r1]
 800393c:	61bb      	str	r3, [r7, #24]
   return(result);
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1e5      	bne.n	8003910 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2220      	movs	r2, #32
 8003948:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2220      	movs	r2, #32
 8003954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e010      	b.n	8003986 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	69da      	ldr	r2, [r3, #28]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	4013      	ands	r3, r2
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	429a      	cmp	r2, r3
 8003972:	bf0c      	ite	eq
 8003974:	2301      	moveq	r3, #1
 8003976:	2300      	movne	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	461a      	mov	r2, r3
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	429a      	cmp	r2, r3
 8003980:	f43f af4a 	beq.w	8003818 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3770      	adds	r7, #112	; 0x70
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800398e:	b480      	push	{r7}
 8003990:	b085      	sub	sp, #20
 8003992:	af00      	add	r7, sp, #0
 8003994:	4603      	mov	r3, r0
 8003996:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800399c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039a0:	2b84      	cmp	r3, #132	; 0x84
 80039a2:	d005      	beq.n	80039b0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80039a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4413      	add	r3, r2
 80039ac:	3303      	adds	r3, #3
 80039ae:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80039b0:	68fb      	ldr	r3, [r7, #12]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039c4:	f3ef 8305 	mrs	r3, IPSR
 80039c8:	607b      	str	r3, [r7, #4]
  return(result);
 80039ca:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bf14      	ite	ne
 80039d0:	2301      	movne	r3, #1
 80039d2:	2300      	moveq	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80039e6:	f001 f925 	bl	8004c34 <vTaskStartScheduler>
  
  return osOK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80039f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039f2:	b089      	sub	sp, #36	; 0x24
 80039f4:	af04      	add	r7, sp, #16
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d020      	beq.n	8003a44 <osThreadCreate+0x54>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d01c      	beq.n	8003a44 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685c      	ldr	r4, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681d      	ldr	r5, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691e      	ldr	r6, [r3, #16]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ffb6 	bl	800398e <makeFreeRtosPriority>
 8003a22:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a2c:	9202      	str	r2, [sp, #8]
 8003a2e:	9301      	str	r3, [sp, #4]
 8003a30:	9100      	str	r1, [sp, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	4632      	mov	r2, r6
 8003a36:	4629      	mov	r1, r5
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f000 ff1d 	bl	8004878 <xTaskCreateStatic>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	e01c      	b.n	8003a7e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685c      	ldr	r4, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a50:	b29e      	uxth	r6, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff ff98 	bl	800398e <makeFreeRtosPriority>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	f107 030c 	add.w	r3, r7, #12
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	9200      	str	r2, [sp, #0]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	4632      	mov	r2, r6
 8003a6c:	4629      	mov	r1, r5
 8003a6e:	4620      	mov	r0, r4
 8003a70:	f000 ff5f 	bl	8004932 <xTaskCreate>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d001      	beq.n	8003a7e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e000      	b.n	8003a80 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a88 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <osDelay+0x16>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	e000      	b.n	8003aa0 <osDelay+0x18>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f001 f893 	bl	8004bcc <vTaskDelay>
  
  return osOK;
 8003aa6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00f      	beq.n	8003ae2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d10a      	bne.n	8003ade <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2203      	movs	r2, #3
 8003ace:	9200      	str	r2, [sp, #0]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	f000 f9bd 	bl	8003e54 <xQueueGenericCreateStatic>
 8003ada:	4603      	mov	r3, r0
 8003adc:	e016      	b.n	8003b0c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e014      	b.n	8003b0c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d110      	bne.n	8003b0a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8003ae8:	2203      	movs	r2, #3
 8003aea:	2100      	movs	r1, #0
 8003aec:	2001      	movs	r0, #1
 8003aee:	f000 fa29 	bl	8003f44 <xQueueGenericCreate>
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <osSemaphoreCreate+0x56>
 8003afa:	2300      	movs	r3, #0
 8003afc:	2200      	movs	r2, #0
 8003afe:	2100      	movs	r1, #0
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 fa79 	bl	8003ff8 <xQueueGenericSend>
      return sema;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	e000      	b.n	8003b0c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003b0a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	e03a      	b.n	8003ba2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b36:	d103      	bne.n	8003b40 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003b38:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	e009      	b.n	8003b54 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d006      	beq.n	8003b54 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <osSemaphoreWait+0x40>
      ticks = 1;
 8003b50:	2301      	movs	r3, #1
 8003b52:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003b54:	f7ff ff33 	bl	80039be <inHandlerMode>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d017      	beq.n	8003b8e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003b5e:	f107 0308 	add.w	r3, r7, #8
 8003b62:	461a      	mov	r2, r3
 8003b64:	2100      	movs	r1, #0
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fcde 	bl	8004528 <xQueueReceiveFromISR>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d001      	beq.n	8003b76 <osSemaphoreWait+0x62>
      return osErrorOS;
 8003b72:	23ff      	movs	r3, #255	; 0xff
 8003b74:	e015      	b.n	8003ba2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d011      	beq.n	8003ba0 <osSemaphoreWait+0x8c>
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <osSemaphoreWait+0x98>)
 8003b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	e008      	b.n	8003ba0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003b8e:	68f9      	ldr	r1, [r7, #12]
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fbbd 	bl	8004310 <xQueueSemaphoreTake>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d001      	beq.n	8003ba0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003b9c:	23ff      	movs	r3, #255	; 0xff
 8003b9e:	e000      	b.n	8003ba2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	e000ed04 	.word	0xe000ed04

08003bb0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003bc0:	f7ff fefd 	bl	80039be <inHandlerMode>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d016      	beq.n	8003bf8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003bca:	f107 0308 	add.w	r3, r7, #8
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fb0f 	bl	80041f4 <xQueueGiveFromISR>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d001      	beq.n	8003be0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003bdc:	23ff      	movs	r3, #255	; 0xff
 8003bde:	e017      	b.n	8003c10 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d013      	beq.n	8003c0e <osSemaphoreRelease+0x5e>
 8003be6:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <osSemaphoreRelease+0x68>)
 8003be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	e00a      	b.n	8003c0e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f9fa 	bl	8003ff8 <xQueueGenericSend>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d001      	beq.n	8003c0e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003c0a:	23ff      	movs	r3, #255	; 0xff
 8003c0c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	e000ed04 	.word	0xe000ed04

08003c1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f103 0208 	add.w	r2, r3, #8
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f04f 32ff 	mov.w	r2, #4294967295
 8003c34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f103 0208 	add.w	r2, r3, #8
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f103 0208 	add.w	r2, r3, #8
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c76:	b480      	push	{r7}
 8003c78:	b085      	sub	sp, #20
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	601a      	str	r2, [r3, #0]
}
 8003cb2:	bf00      	nop
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b085      	sub	sp, #20
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd4:	d103      	bne.n	8003cde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	e00c      	b.n	8003cf8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3308      	adds	r3, #8
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	e002      	b.n	8003cec <vListInsert+0x2e>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d2f6      	bcs.n	8003ce6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	601a      	str	r2, [r3, #0]
}
 8003d24:	bf00      	nop
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6892      	ldr	r2, [r2, #8]
 8003d46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6852      	ldr	r2, [r2, #4]
 8003d50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d103      	bne.n	8003d64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	1e5a      	subs	r2, r3, #1
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10a      	bne.n	8003dae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003daa:	bf00      	nop
 8003dac:	e7fe      	b.n	8003dac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003dae:	f001 fea1 	bl	8005af4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dba:	68f9      	ldr	r1, [r7, #12]
 8003dbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003dbe:	fb01 f303 	mul.w	r3, r1, r3
 8003dc2:	441a      	add	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dde:	3b01      	subs	r3, #1
 8003de0:	68f9      	ldr	r1, [r7, #12]
 8003de2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003de4:	fb01 f303 	mul.w	r3, r1, r3
 8003de8:	441a      	add	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	22ff      	movs	r2, #255	; 0xff
 8003df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	22ff      	movs	r2, #255	; 0xff
 8003dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d114      	bne.n	8003e2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01a      	beq.n	8003e42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3310      	adds	r3, #16
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 f961 	bl	80050d8 <xTaskRemoveFromEventList>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d012      	beq.n	8003e42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <xQueueGenericReset+0xcc>)
 8003e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	e009      	b.n	8003e42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3310      	adds	r3, #16
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fef2 	bl	8003c1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	3324      	adds	r3, #36	; 0x24
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff feed 	bl	8003c1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e42:	f001 fe87 	bl	8005b54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e46:	2301      	movs	r3, #1
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	e000ed04 	.word	0xe000ed04

08003e54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08e      	sub	sp, #56	; 0x38
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6c:	f383 8811 	msr	BASEPRI, r3
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e7a:	bf00      	nop
 8003e7c:	e7fe      	b.n	8003e7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10a      	bne.n	8003e9a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e96:	bf00      	nop
 8003e98:	e7fe      	b.n	8003e98 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <xQueueGenericCreateStatic+0x52>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <xQueueGenericCreateStatic+0x56>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <xQueueGenericCreateStatic+0x58>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10a      	bne.n	8003ec6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	623b      	str	r3, [r7, #32]
}
 8003ec2:	bf00      	nop
 8003ec4:	e7fe      	b.n	8003ec4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d102      	bne.n	8003ed2 <xQueueGenericCreateStatic+0x7e>
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <xQueueGenericCreateStatic+0x82>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <xQueueGenericCreateStatic+0x84>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10a      	bne.n	8003ef2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	61fb      	str	r3, [r7, #28]
}
 8003eee:	bf00      	nop
 8003ef0:	e7fe      	b.n	8003ef0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003ef2:	2348      	movs	r3, #72	; 0x48
 8003ef4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b48      	cmp	r3, #72	; 0x48
 8003efa:	d00a      	beq.n	8003f12 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	61bb      	str	r3, [r7, #24]
}
 8003f0e:	bf00      	nop
 8003f10:	e7fe      	b.n	8003f10 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f12:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00d      	beq.n	8003f3a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 f83f 	bl	8003fb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3730      	adds	r7, #48	; 0x30
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08a      	sub	sp, #40	; 0x28
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10a      	bne.n	8003f6e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	613b      	str	r3, [r7, #16]
}
 8003f6a:	bf00      	nop
 8003f6c:	e7fe      	b.n	8003f6c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	fb02 f303 	mul.w	r3, r2, r3
 8003f76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	3348      	adds	r3, #72	; 0x48
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f001 fedb 	bl	8005d38 <pvPortMalloc>
 8003f82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d011      	beq.n	8003fae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	3348      	adds	r3, #72	; 0x48
 8003f92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f9c:	79fa      	ldrb	r2, [r7, #7]
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f805 	bl	8003fb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003fae:	69bb      	ldr	r3, [r7, #24]
	}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3720      	adds	r7, #32
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d103      	bne.n	8003fd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	e002      	b.n	8003fda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	69b8      	ldr	r0, [r7, #24]
 8003fea:	f7ff fecb 	bl	8003d84 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003fee:	bf00      	nop
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08e      	sub	sp, #56	; 0x38
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004006:	2300      	movs	r3, #0
 8004008:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10a      	bne.n	800402a <xQueueGenericSend+0x32>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004026:	bf00      	nop
 8004028:	e7fe      	b.n	8004028 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d103      	bne.n	8004038 <xQueueGenericSend+0x40>
 8004030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <xQueueGenericSend+0x44>
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <xQueueGenericSend+0x46>
 800403c:	2300      	movs	r3, #0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10a      	bne.n	8004058 <xQueueGenericSend+0x60>
	__asm volatile
 8004042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004054:	bf00      	nop
 8004056:	e7fe      	b.n	8004056 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d103      	bne.n	8004066 <xQueueGenericSend+0x6e>
 800405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <xQueueGenericSend+0x72>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <xQueueGenericSend+0x74>
 800406a:	2300      	movs	r3, #0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10a      	bne.n	8004086 <xQueueGenericSend+0x8e>
	__asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	623b      	str	r3, [r7, #32]
}
 8004082:	bf00      	nop
 8004084:	e7fe      	b.n	8004084 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004086:	f001 f9e7 	bl	8005458 <xTaskGetSchedulerState>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d102      	bne.n	8004096 <xQueueGenericSend+0x9e>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <xQueueGenericSend+0xa2>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <xQueueGenericSend+0xa4>
 800409a:	2300      	movs	r3, #0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10a      	bne.n	80040b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	61fb      	str	r3, [r7, #28]
}
 80040b2:	bf00      	nop
 80040b4:	e7fe      	b.n	80040b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040b6:	f001 fd1d 	bl	8005af4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d302      	bcc.n	80040cc <xQueueGenericSend+0xd4>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d129      	bne.n	8004120 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040d2:	f000 fac1 	bl	8004658 <prvCopyDataToQueue>
 80040d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d010      	beq.n	8004102 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	3324      	adds	r3, #36	; 0x24
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fff7 	bl	80050d8 <xTaskRemoveFromEventList>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d013      	beq.n	8004118 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80040f0:	4b3f      	ldr	r3, [pc, #252]	; (80041f0 <xQueueGenericSend+0x1f8>)
 80040f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	e00a      	b.n	8004118 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004104:	2b00      	cmp	r3, #0
 8004106:	d007      	beq.n	8004118 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004108:	4b39      	ldr	r3, [pc, #228]	; (80041f0 <xQueueGenericSend+0x1f8>)
 800410a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004118:	f001 fd1c 	bl	8005b54 <vPortExitCritical>
				return pdPASS;
 800411c:	2301      	movs	r3, #1
 800411e:	e063      	b.n	80041e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d103      	bne.n	800412e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004126:	f001 fd15 	bl	8005b54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800412a:	2300      	movs	r3, #0
 800412c:	e05c      	b.n	80041e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800412e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004130:	2b00      	cmp	r3, #0
 8004132:	d106      	bne.n	8004142 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004134:	f107 0314 	add.w	r3, r7, #20
 8004138:	4618      	mov	r0, r3
 800413a:	f001 f82f 	bl	800519c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800413e:	2301      	movs	r3, #1
 8004140:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004142:	f001 fd07 	bl	8005b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004146:	f000 fddf 	bl	8004d08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800414a:	f001 fcd3 	bl	8005af4 <vPortEnterCritical>
 800414e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004150:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004154:	b25b      	sxtb	r3, r3
 8004156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415a:	d103      	bne.n	8004164 <xQueueGenericSend+0x16c>
 800415c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004166:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800416a:	b25b      	sxtb	r3, r3
 800416c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004170:	d103      	bne.n	800417a <xQueueGenericSend+0x182>
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800417a:	f001 fceb 	bl	8005b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800417e:	1d3a      	adds	r2, r7, #4
 8004180:	f107 0314 	add.w	r3, r7, #20
 8004184:	4611      	mov	r1, r2
 8004186:	4618      	mov	r0, r3
 8004188:	f001 f81e 	bl	80051c8 <xTaskCheckForTimeOut>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d124      	bne.n	80041dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004192:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004194:	f000 fb58 	bl	8004848 <prvIsQueueFull>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d018      	beq.n	80041d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	3310      	adds	r3, #16
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	4611      	mov	r1, r2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 ff72 	bl	8005090 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041ae:	f000 fae3 	bl	8004778 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041b2:	f000 fdb7 	bl	8004d24 <xTaskResumeAll>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f47f af7c 	bne.w	80040b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80041be:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <xQueueGenericSend+0x1f8>)
 80041c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	e772      	b.n	80040b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80041d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041d2:	f000 fad1 	bl	8004778 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041d6:	f000 fda5 	bl	8004d24 <xTaskResumeAll>
 80041da:	e76c      	b.n	80040b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80041dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041de:	f000 facb 	bl	8004778 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041e2:	f000 fd9f 	bl	8004d24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80041e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3738      	adds	r7, #56	; 0x38
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	e000ed04 	.word	0xe000ed04

080041f4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08e      	sub	sp, #56	; 0x38
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10a      	bne.n	800421e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	623b      	str	r3, [r7, #32]
}
 800421a:	bf00      	nop
 800421c:	e7fe      	b.n	800421c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <xQueueGiveFromISR+0x48>
	__asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	61fb      	str	r3, [r7, #28]
}
 8004238:	bf00      	nop
 800423a:	e7fe      	b.n	800423a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d103      	bne.n	800424c <xQueueGiveFromISR+0x58>
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <xQueueGiveFromISR+0x5c>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <xQueueGiveFromISR+0x5e>
 8004250:	2300      	movs	r3, #0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10a      	bne.n	800426c <xQueueGiveFromISR+0x78>
	__asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	61bb      	str	r3, [r7, #24]
}
 8004268:	bf00      	nop
 800426a:	e7fe      	b.n	800426a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800426c:	f001 fd24 	bl	8005cb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004270:	f3ef 8211 	mrs	r2, BASEPRI
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	617a      	str	r2, [r7, #20]
 8004286:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004288:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800428a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004298:	429a      	cmp	r2, r3
 800429a:	d22b      	bcs.n	80042f4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80042ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80042b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b6:	d112      	bne.n	80042de <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d016      	beq.n	80042ee <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c2:	3324      	adds	r3, #36	; 0x24
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 ff07 	bl	80050d8 <xTaskRemoveFromEventList>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00e      	beq.n	80042ee <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00b      	beq.n	80042ee <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2201      	movs	r2, #1
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	e007      	b.n	80042ee <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042e2:	3301      	adds	r3, #1
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	b25a      	sxtb	r2, r3
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80042ee:	2301      	movs	r3, #1
 80042f0:	637b      	str	r3, [r7, #52]	; 0x34
 80042f2:	e001      	b.n	80042f8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	637b      	str	r3, [r7, #52]	; 0x34
 80042f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fa:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004302:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004306:	4618      	mov	r0, r3
 8004308:	3738      	adds	r7, #56	; 0x38
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08e      	sub	sp, #56	; 0x38
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800431a:	2300      	movs	r3, #0
 800431c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004322:	2300      	movs	r3, #0
 8004324:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10a      	bne.n	8004342 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	623b      	str	r3, [r7, #32]
}
 800433e:	bf00      	nop
 8004340:	e7fe      	b.n	8004340 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	61fb      	str	r3, [r7, #28]
}
 800435c:	bf00      	nop
 800435e:	e7fe      	b.n	800435e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004360:	f001 f87a 	bl	8005458 <xTaskGetSchedulerState>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d102      	bne.n	8004370 <xQueueSemaphoreTake+0x60>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <xQueueSemaphoreTake+0x64>
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <xQueueSemaphoreTake+0x66>
 8004374:	2300      	movs	r3, #0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10a      	bne.n	8004390 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	61bb      	str	r3, [r7, #24]
}
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004390:	f001 fbb0 	bl	8005af4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439c:	2b00      	cmp	r3, #0
 800439e:	d024      	beq.n	80043ea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a2:	1e5a      	subs	r2, r3, #1
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d104      	bne.n	80043ba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80043b0:	f001 f9fa 	bl	80057a8 <pvTaskIncrementMutexHeldCount>
 80043b4:	4602      	mov	r2, r0
 80043b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00f      	beq.n	80043e2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c4:	3310      	adds	r3, #16
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fe86 	bl	80050d8 <xTaskRemoveFromEventList>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d007      	beq.n	80043e2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043d2:	4b54      	ldr	r3, [pc, #336]	; (8004524 <xQueueSemaphoreTake+0x214>)
 80043d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043e2:	f001 fbb7 	bl	8005b54 <vPortExitCritical>
				return pdPASS;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e097      	b.n	800451a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d111      	bne.n	8004414 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	617b      	str	r3, [r7, #20]
}
 8004408:	bf00      	nop
 800440a:	e7fe      	b.n	800440a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800440c:	f001 fba2 	bl	8005b54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004410:	2300      	movs	r3, #0
 8004412:	e082      	b.n	800451a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800441a:	f107 030c 	add.w	r3, r7, #12
 800441e:	4618      	mov	r0, r3
 8004420:	f000 febc 	bl	800519c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004424:	2301      	movs	r3, #1
 8004426:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004428:	f001 fb94 	bl	8005b54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800442c:	f000 fc6c 	bl	8004d08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004430:	f001 fb60 	bl	8005af4 <vPortEnterCritical>
 8004434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800443a:	b25b      	sxtb	r3, r3
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004440:	d103      	bne.n	800444a <xQueueSemaphoreTake+0x13a>
 8004442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800444a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004450:	b25b      	sxtb	r3, r3
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004456:	d103      	bne.n	8004460 <xQueueSemaphoreTake+0x150>
 8004458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004460:	f001 fb78 	bl	8005b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004464:	463a      	mov	r2, r7
 8004466:	f107 030c 	add.w	r3, r7, #12
 800446a:	4611      	mov	r1, r2
 800446c:	4618      	mov	r0, r3
 800446e:	f000 feab 	bl	80051c8 <xTaskCheckForTimeOut>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d132      	bne.n	80044de <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004478:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800447a:	f000 f9cf 	bl	800481c <prvIsQueueEmpty>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d026      	beq.n	80044d2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d109      	bne.n	80044a0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800448c:	f001 fb32 	bl	8005af4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fffd 	bl	8005494 <xTaskPriorityInherit>
 800449a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800449c:	f001 fb5a 	bl	8005b54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a2:	3324      	adds	r3, #36	; 0x24
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	4611      	mov	r1, r2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fdf1 	bl	8005090 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044b0:	f000 f962 	bl	8004778 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044b4:	f000 fc36 	bl	8004d24 <xTaskResumeAll>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f47f af68 	bne.w	8004390 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80044c0:	4b18      	ldr	r3, [pc, #96]	; (8004524 <xQueueSemaphoreTake+0x214>)
 80044c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	e75e      	b.n	8004390 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80044d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044d4:	f000 f950 	bl	8004778 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044d8:	f000 fc24 	bl	8004d24 <xTaskResumeAll>
 80044dc:	e758      	b.n	8004390 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80044de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044e0:	f000 f94a 	bl	8004778 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044e4:	f000 fc1e 	bl	8004d24 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044ea:	f000 f997 	bl	800481c <prvIsQueueEmpty>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f43f af4d 	beq.w	8004390 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80044f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00d      	beq.n	8004518 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80044fc:	f001 fafa 	bl	8005af4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004500:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004502:	f000 f891 	bl	8004628 <prvGetDisinheritPriorityAfterTimeout>
 8004506:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800450e:	4618      	mov	r0, r3
 8004510:	f001 f8bc 	bl	800568c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004514:	f001 fb1e 	bl	8005b54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004518:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800451a:	4618      	mov	r0, r3
 800451c:	3738      	adds	r7, #56	; 0x38
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	e000ed04 	.word	0xe000ed04

08004528 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08e      	sub	sp, #56	; 0x38
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10a      	bne.n	8004554 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	623b      	str	r3, [r7, #32]
}
 8004550:	bf00      	nop
 8004552:	e7fe      	b.n	8004552 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <xQueueReceiveFromISR+0x3a>
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <xQueueReceiveFromISR+0x3e>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <xQueueReceiveFromISR+0x40>
 8004566:	2300      	movs	r3, #0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	61fb      	str	r3, [r7, #28]
}
 800457e:	bf00      	nop
 8004580:	e7fe      	b.n	8004580 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004582:	f001 fb99 	bl	8005cb8 <vPortValidateInterruptPriority>
	__asm volatile
 8004586:	f3ef 8211 	mrs	r2, BASEPRI
 800458a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	61ba      	str	r2, [r7, #24]
 800459c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800459e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d02f      	beq.n	800460e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045bc:	f000 f8b6 	bl	800472c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c2:	1e5a      	subs	r2, r3, #1
 80045c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80045c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d0:	d112      	bne.n	80045f8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d016      	beq.n	8004608 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	3310      	adds	r3, #16
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fd7a 	bl	80050d8 <xTaskRemoveFromEventList>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00e      	beq.n	8004608 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00b      	beq.n	8004608 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	e007      	b.n	8004608 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80045f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045fc:	3301      	adds	r3, #1
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	b25a      	sxtb	r2, r3
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004608:	2301      	movs	r3, #1
 800460a:	637b      	str	r3, [r7, #52]	; 0x34
 800460c:	e001      	b.n	8004612 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800460e:	2300      	movs	r3, #0
 8004610:	637b      	str	r3, [r7, #52]	; 0x34
 8004612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004614:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f383 8811 	msr	BASEPRI, r3
}
 800461c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800461e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004620:	4618      	mov	r0, r3
 8004622:	3738      	adds	r7, #56	; 0x38
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	2b00      	cmp	r3, #0
 8004636:	d006      	beq.n	8004646 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f1c3 0307 	rsb	r3, r3, #7
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	e001      	b.n	800464a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800464a:	68fb      	ldr	r3, [r7, #12]
	}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10d      	bne.n	8004692 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d14d      	bne.n	800471a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	4618      	mov	r0, r3
 8004684:	f000 ff7c 	bl	8005580 <xTaskPriorityDisinherit>
 8004688:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	609a      	str	r2, [r3, #8]
 8004690:	e043      	b.n	800471a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d119      	bne.n	80046cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6858      	ldr	r0, [r3, #4]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	461a      	mov	r2, r3
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	f001 fd58 	bl	8006158 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	441a      	add	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d32b      	bcc.n	800471a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	605a      	str	r2, [r3, #4]
 80046ca:	e026      	b.n	800471a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	68d8      	ldr	r0, [r3, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	461a      	mov	r2, r3
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	f001 fd3e 	bl	8006158 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	425b      	negs	r3, r3
 80046e6:	441a      	add	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d207      	bcs.n	8004708 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	425b      	negs	r3, r3
 8004702:	441a      	add	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d105      	bne.n	800471a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	3b01      	subs	r3, #1
 8004718:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004722:	697b      	ldr	r3, [r7, #20]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d018      	beq.n	8004770 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	441a      	add	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	429a      	cmp	r2, r3
 8004756:	d303      	bcc.n	8004760 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68d9      	ldr	r1, [r3, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	461a      	mov	r2, r3
 800476a:	6838      	ldr	r0, [r7, #0]
 800476c:	f001 fcf4 	bl	8006158 <memcpy>
	}
}
 8004770:	bf00      	nop
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004780:	f001 f9b8 	bl	8005af4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800478a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800478c:	e011      	b.n	80047b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	2b00      	cmp	r3, #0
 8004794:	d012      	beq.n	80047bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3324      	adds	r3, #36	; 0x24
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fc9c 	bl	80050d8 <xTaskRemoveFromEventList>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80047a6:	f000 fd71 	bl	800528c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	dce9      	bgt.n	800478e <prvUnlockQueue+0x16>
 80047ba:	e000      	b.n	80047be <prvUnlockQueue+0x46>
					break;
 80047bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	22ff      	movs	r2, #255	; 0xff
 80047c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80047c6:	f001 f9c5 	bl	8005b54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047ca:	f001 f993 	bl	8005af4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047d6:	e011      	b.n	80047fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d012      	beq.n	8004806 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3310      	adds	r3, #16
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fc77 	bl	80050d8 <xTaskRemoveFromEventList>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047f0:	f000 fd4c 	bl	800528c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047f4:	7bbb      	ldrb	r3, [r7, #14]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004800:	2b00      	cmp	r3, #0
 8004802:	dce9      	bgt.n	80047d8 <prvUnlockQueue+0x60>
 8004804:	e000      	b.n	8004808 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004806:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	22ff      	movs	r2, #255	; 0xff
 800480c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004810:	f001 f9a0 	bl	8005b54 <vPortExitCritical>
}
 8004814:	bf00      	nop
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004824:	f001 f966 	bl	8005af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482c:	2b00      	cmp	r3, #0
 800482e:	d102      	bne.n	8004836 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004830:	2301      	movs	r3, #1
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	e001      	b.n	800483a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800483a:	f001 f98b 	bl	8005b54 <vPortExitCritical>

	return xReturn;
 800483e:	68fb      	ldr	r3, [r7, #12]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004850:	f001 f950 	bl	8005af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485c:	429a      	cmp	r2, r3
 800485e:	d102      	bne.n	8004866 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004860:	2301      	movs	r3, #1
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	e001      	b.n	800486a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800486a:	f001 f973 	bl	8005b54 <vPortExitCritical>

	return xReturn;
 800486e:	68fb      	ldr	r3, [r7, #12]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08e      	sub	sp, #56	; 0x38
 800487c:	af04      	add	r7, sp, #16
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10a      	bne.n	80048a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	623b      	str	r3, [r7, #32]
}
 800489e:	bf00      	nop
 80048a0:	e7fe      	b.n	80048a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80048a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <xTaskCreateStatic+0x46>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	61fb      	str	r3, [r7, #28]
}
 80048ba:	bf00      	nop
 80048bc:	e7fe      	b.n	80048bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80048be:	23b4      	movs	r3, #180	; 0xb4
 80048c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2bb4      	cmp	r3, #180	; 0xb4
 80048c6:	d00a      	beq.n	80048de <xTaskCreateStatic+0x66>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	61bb      	str	r3, [r7, #24]
}
 80048da:	bf00      	nop
 80048dc:	e7fe      	b.n	80048dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80048de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80048e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d01e      	beq.n	8004924 <xTaskCreateStatic+0xac>
 80048e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01b      	beq.n	8004924 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	2202      	movs	r2, #2
 80048fa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80048fe:	2300      	movs	r3, #0
 8004900:	9303      	str	r3, [sp, #12]
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	9302      	str	r3, [sp, #8]
 8004906:	f107 0314 	add.w	r3, r7, #20
 800490a:	9301      	str	r3, [sp, #4]
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f850 	bl	80049bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800491c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800491e:	f000 f8eb 	bl	8004af8 <prvAddNewTaskToReadyList>
 8004922:	e001      	b.n	8004928 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004928:	697b      	ldr	r3, [r7, #20]
	}
 800492a:	4618      	mov	r0, r3
 800492c:	3728      	adds	r7, #40	; 0x28
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004932:	b580      	push	{r7, lr}
 8004934:	b08c      	sub	sp, #48	; 0x30
 8004936:	af04      	add	r7, sp, #16
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	603b      	str	r3, [r7, #0]
 800493e:	4613      	mov	r3, r2
 8004940:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004942:	88fb      	ldrh	r3, [r7, #6]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4618      	mov	r0, r3
 8004948:	f001 f9f6 	bl	8005d38 <pvPortMalloc>
 800494c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00e      	beq.n	8004972 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004954:	20b4      	movs	r0, #180	; 0xb4
 8004956:	f001 f9ef 	bl	8005d38 <pvPortMalloc>
 800495a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
 8004968:	e005      	b.n	8004976 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800496a:	6978      	ldr	r0, [r7, #20]
 800496c:	f001 fab0 	bl	8005ed0 <vPortFree>
 8004970:	e001      	b.n	8004976 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d017      	beq.n	80049ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004984:	88fa      	ldrh	r2, [r7, #6]
 8004986:	2300      	movs	r3, #0
 8004988:	9303      	str	r3, [sp, #12]
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	9302      	str	r3, [sp, #8]
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	9301      	str	r3, [sp, #4]
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68b9      	ldr	r1, [r7, #8]
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 f80e 	bl	80049bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049a0:	69f8      	ldr	r0, [r7, #28]
 80049a2:	f000 f8a9 	bl	8004af8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049a6:	2301      	movs	r3, #1
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	e002      	b.n	80049b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049ac:	f04f 33ff 	mov.w	r3, #4294967295
 80049b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80049b2:	69bb      	ldr	r3, [r7, #24]
	}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3720      	adds	r7, #32
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80049ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049d4:	3b01      	subs	r3, #1
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	f023 0307 	bic.w	r3, r3, #7
 80049e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <prvInitialiseNewTask+0x48>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	617b      	str	r3, [r7, #20]
}
 8004a00:	bf00      	nop
 8004a02:	e7fe      	b.n	8004a02 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d01f      	beq.n	8004a4a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61fb      	str	r3, [r7, #28]
 8004a0e:	e012      	b.n	8004a36 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	4413      	add	r3, r2
 8004a16:	7819      	ldrb	r1, [r3, #0]
 8004a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	3334      	adds	r3, #52	; 0x34
 8004a20:	460a      	mov	r2, r1
 8004a22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	4413      	add	r3, r2
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d006      	beq.n	8004a3e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	3301      	adds	r3, #1
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	2b0f      	cmp	r3, #15
 8004a3a:	d9e9      	bls.n	8004a10 <prvInitialiseNewTask+0x54>
 8004a3c:	e000      	b.n	8004a40 <prvInitialiseNewTask+0x84>
			{
				break;
 8004a3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a48:	e003      	b.n	8004a52 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	2b06      	cmp	r3, #6
 8004a56:	d901      	bls.n	8004a5c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a58:	2306      	movs	r3, #6
 8004a5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a66:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a70:	3304      	adds	r3, #4
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff f8f2 	bl	8003c5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7a:	3318      	adds	r3, #24
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff f8ed 	bl	8003c5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	f1c3 0207 	rsb	r2, r3, #7
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	334c      	adds	r3, #76	; 0x4c
 8004aac:	2260      	movs	r2, #96	; 0x60
 8004aae:	2100      	movs	r1, #0
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f001 fb5f 	bl	8006174 <memset>
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	4a0c      	ldr	r2, [pc, #48]	; (8004aec <prvInitialiseNewTask+0x130>)
 8004aba:	651a      	str	r2, [r3, #80]	; 0x50
 8004abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abe:	4a0c      	ldr	r2, [pc, #48]	; (8004af0 <prvInitialiseNewTask+0x134>)
 8004ac0:	655a      	str	r2, [r3, #84]	; 0x54
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	4a0b      	ldr	r2, [pc, #44]	; (8004af4 <prvInitialiseNewTask+0x138>)
 8004ac6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	68f9      	ldr	r1, [r7, #12]
 8004acc:	69b8      	ldr	r0, [r7, #24]
 8004ace:	f000 fee5 	bl	800589c <pxPortInitialiseStack>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ae4:	bf00      	nop
 8004ae6:	3720      	adds	r7, #32
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	08006500 	.word	0x08006500
 8004af0:	08006520 	.word	0x08006520
 8004af4:	080064e0 	.word	0x080064e0

08004af8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b00:	f000 fff8 	bl	8005af4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b04:	4b2a      	ldr	r3, [pc, #168]	; (8004bb0 <prvAddNewTaskToReadyList+0xb8>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	4a29      	ldr	r2, [pc, #164]	; (8004bb0 <prvAddNewTaskToReadyList+0xb8>)
 8004b0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b0e:	4b29      	ldr	r3, [pc, #164]	; (8004bb4 <prvAddNewTaskToReadyList+0xbc>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d109      	bne.n	8004b2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b16:	4a27      	ldr	r2, [pc, #156]	; (8004bb4 <prvAddNewTaskToReadyList+0xbc>)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b1c:	4b24      	ldr	r3, [pc, #144]	; (8004bb0 <prvAddNewTaskToReadyList+0xb8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d110      	bne.n	8004b46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b24:	f000 fbd6 	bl	80052d4 <prvInitialiseTaskLists>
 8004b28:	e00d      	b.n	8004b46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b2a:	4b23      	ldr	r3, [pc, #140]	; (8004bb8 <prvAddNewTaskToReadyList+0xc0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d109      	bne.n	8004b46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b32:	4b20      	ldr	r3, [pc, #128]	; (8004bb4 <prvAddNewTaskToReadyList+0xbc>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d802      	bhi.n	8004b46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b40:	4a1c      	ldr	r2, [pc, #112]	; (8004bb4 <prvAddNewTaskToReadyList+0xbc>)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b46:	4b1d      	ldr	r3, [pc, #116]	; (8004bbc <prvAddNewTaskToReadyList+0xc4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	4a1b      	ldr	r2, [pc, #108]	; (8004bbc <prvAddNewTaskToReadyList+0xc4>)
 8004b4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	2201      	movs	r2, #1
 8004b56:	409a      	lsls	r2, r3
 8004b58:	4b19      	ldr	r3, [pc, #100]	; (8004bc0 <prvAddNewTaskToReadyList+0xc8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	4a18      	ldr	r2, [pc, #96]	; (8004bc0 <prvAddNewTaskToReadyList+0xc8>)
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4a15      	ldr	r2, [pc, #84]	; (8004bc4 <prvAddNewTaskToReadyList+0xcc>)
 8004b70:	441a      	add	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3304      	adds	r3, #4
 8004b76:	4619      	mov	r1, r3
 8004b78:	4610      	mov	r0, r2
 8004b7a:	f7ff f87c 	bl	8003c76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b7e:	f000 ffe9 	bl	8005b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b82:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <prvAddNewTaskToReadyList+0xc0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00e      	beq.n	8004ba8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b8a:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <prvAddNewTaskToReadyList+0xbc>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d207      	bcs.n	8004ba8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b98:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <prvAddNewTaskToReadyList+0xd0>)
 8004b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ba8:	bf00      	nop
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	20000528 	.word	0x20000528
 8004bb4:	20000428 	.word	0x20000428
 8004bb8:	20000534 	.word	0x20000534
 8004bbc:	20000544 	.word	0x20000544
 8004bc0:	20000530 	.word	0x20000530
 8004bc4:	2000042c 	.word	0x2000042c
 8004bc8:	e000ed04 	.word	0xe000ed04

08004bcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d017      	beq.n	8004c0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004bde:	4b13      	ldr	r3, [pc, #76]	; (8004c2c <vTaskDelay+0x60>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <vTaskDelay+0x30>
	__asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	60bb      	str	r3, [r7, #8]
}
 8004bf8:	bf00      	nop
 8004bfa:	e7fe      	b.n	8004bfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004bfc:	f000 f884 	bl	8004d08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c00:	2100      	movs	r1, #0
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fde4 	bl	80057d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c08:	f000 f88c 	bl	8004d24 <xTaskResumeAll>
 8004c0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d107      	bne.n	8004c24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004c14:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <vTaskDelay+0x64>)
 8004c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c24:	bf00      	nop
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	20000550 	.word	0x20000550
 8004c30:	e000ed04 	.word	0xe000ed04

08004c34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08a      	sub	sp, #40	; 0x28
 8004c38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c42:	463a      	mov	r2, r7
 8004c44:	1d39      	adds	r1, r7, #4
 8004c46:	f107 0308 	add.w	r3, r7, #8
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fb fc4a 	bl	80004e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c50:	6839      	ldr	r1, [r7, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	9202      	str	r2, [sp, #8]
 8004c58:	9301      	str	r3, [sp, #4]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	460a      	mov	r2, r1
 8004c62:	4921      	ldr	r1, [pc, #132]	; (8004ce8 <vTaskStartScheduler+0xb4>)
 8004c64:	4821      	ldr	r0, [pc, #132]	; (8004cec <vTaskStartScheduler+0xb8>)
 8004c66:	f7ff fe07 	bl	8004878 <xTaskCreateStatic>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4a20      	ldr	r2, [pc, #128]	; (8004cf0 <vTaskStartScheduler+0xbc>)
 8004c6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c70:	4b1f      	ldr	r3, [pc, #124]	; (8004cf0 <vTaskStartScheduler+0xbc>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	e001      	b.n	8004c82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d11b      	bne.n	8004cc0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	613b      	str	r3, [r7, #16]
}
 8004c9a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c9c:	4b15      	ldr	r3, [pc, #84]	; (8004cf4 <vTaskStartScheduler+0xc0>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	334c      	adds	r3, #76	; 0x4c
 8004ca2:	4a15      	ldr	r2, [pc, #84]	; (8004cf8 <vTaskStartScheduler+0xc4>)
 8004ca4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ca6:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <vTaskStartScheduler+0xc8>)
 8004ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004cae:	4b14      	ldr	r3, [pc, #80]	; (8004d00 <vTaskStartScheduler+0xcc>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004cb4:	4b13      	ldr	r3, [pc, #76]	; (8004d04 <vTaskStartScheduler+0xd0>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004cba:	f000 fe79 	bl	80059b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004cbe:	e00e      	b.n	8004cde <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc6:	d10a      	bne.n	8004cde <vTaskStartScheduler+0xaa>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	60fb      	str	r3, [r7, #12]
}
 8004cda:	bf00      	nop
 8004cdc:	e7fe      	b.n	8004cdc <vTaskStartScheduler+0xa8>
}
 8004cde:	bf00      	nop
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	08006490 	.word	0x08006490
 8004cec:	080052a5 	.word	0x080052a5
 8004cf0:	2000054c 	.word	0x2000054c
 8004cf4:	20000428 	.word	0x20000428
 8004cf8:	20000010 	.word	0x20000010
 8004cfc:	20000548 	.word	0x20000548
 8004d00:	20000534 	.word	0x20000534
 8004d04:	2000052c 	.word	0x2000052c

08004d08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d0c:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <vTaskSuspendAll+0x18>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3301      	adds	r3, #1
 8004d12:	4a03      	ldr	r2, [pc, #12]	; (8004d20 <vTaskSuspendAll+0x18>)
 8004d14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d16:	bf00      	nop
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	20000550 	.word	0x20000550

08004d24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d32:	4b41      	ldr	r3, [pc, #260]	; (8004e38 <xTaskResumeAll+0x114>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10a      	bne.n	8004d50 <xTaskResumeAll+0x2c>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	603b      	str	r3, [r7, #0]
}
 8004d4c:	bf00      	nop
 8004d4e:	e7fe      	b.n	8004d4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d50:	f000 fed0 	bl	8005af4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d54:	4b38      	ldr	r3, [pc, #224]	; (8004e38 <xTaskResumeAll+0x114>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	4a37      	ldr	r2, [pc, #220]	; (8004e38 <xTaskResumeAll+0x114>)
 8004d5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d5e:	4b36      	ldr	r3, [pc, #216]	; (8004e38 <xTaskResumeAll+0x114>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d161      	bne.n	8004e2a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d66:	4b35      	ldr	r3, [pc, #212]	; (8004e3c <xTaskResumeAll+0x118>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d05d      	beq.n	8004e2a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d6e:	e02e      	b.n	8004dce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d70:	4b33      	ldr	r3, [pc, #204]	; (8004e40 <xTaskResumeAll+0x11c>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3318      	adds	r3, #24
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fe ffd7 	bl	8003d30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	3304      	adds	r3, #4
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fe ffd2 	bl	8003d30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	2201      	movs	r2, #1
 8004d92:	409a      	lsls	r2, r3
 8004d94:	4b2b      	ldr	r3, [pc, #172]	; (8004e44 <xTaskResumeAll+0x120>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	4a2a      	ldr	r2, [pc, #168]	; (8004e44 <xTaskResumeAll+0x120>)
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4a27      	ldr	r2, [pc, #156]	; (8004e48 <xTaskResumeAll+0x124>)
 8004dac:	441a      	add	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	3304      	adds	r3, #4
 8004db2:	4619      	mov	r1, r3
 8004db4:	4610      	mov	r0, r2
 8004db6:	f7fe ff5e 	bl	8003c76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dbe:	4b23      	ldr	r3, [pc, #140]	; (8004e4c <xTaskResumeAll+0x128>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d302      	bcc.n	8004dce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004dc8:	4b21      	ldr	r3, [pc, #132]	; (8004e50 <xTaskResumeAll+0x12c>)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dce:	4b1c      	ldr	r3, [pc, #112]	; (8004e40 <xTaskResumeAll+0x11c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1cc      	bne.n	8004d70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ddc:	f000 fb1c 	bl	8005418 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004de0:	4b1c      	ldr	r3, [pc, #112]	; (8004e54 <xTaskResumeAll+0x130>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d010      	beq.n	8004e0e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004dec:	f000 f836 	bl	8004e5c <xTaskIncrementTick>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004df6:	4b16      	ldr	r3, [pc, #88]	; (8004e50 <xTaskResumeAll+0x12c>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1f1      	bne.n	8004dec <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004e08:	4b12      	ldr	r3, [pc, #72]	; (8004e54 <xTaskResumeAll+0x130>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e0e:	4b10      	ldr	r3, [pc, #64]	; (8004e50 <xTaskResumeAll+0x12c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d009      	beq.n	8004e2a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e16:	2301      	movs	r3, #1
 8004e18:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e1a:	4b0f      	ldr	r3, [pc, #60]	; (8004e58 <xTaskResumeAll+0x134>)
 8004e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e2a:	f000 fe93 	bl	8005b54 <vPortExitCritical>

	return xAlreadyYielded;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20000550 	.word	0x20000550
 8004e3c:	20000528 	.word	0x20000528
 8004e40:	200004e8 	.word	0x200004e8
 8004e44:	20000530 	.word	0x20000530
 8004e48:	2000042c 	.word	0x2000042c
 8004e4c:	20000428 	.word	0x20000428
 8004e50:	2000053c 	.word	0x2000053c
 8004e54:	20000538 	.word	0x20000538
 8004e58:	e000ed04 	.word	0xe000ed04

08004e5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e62:	2300      	movs	r3, #0
 8004e64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e66:	4b4e      	ldr	r3, [pc, #312]	; (8004fa0 <xTaskIncrementTick+0x144>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f040 808e 	bne.w	8004f8c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e70:	4b4c      	ldr	r3, [pc, #304]	; (8004fa4 <xTaskIncrementTick+0x148>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3301      	adds	r3, #1
 8004e76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e78:	4a4a      	ldr	r2, [pc, #296]	; (8004fa4 <xTaskIncrementTick+0x148>)
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d120      	bne.n	8004ec6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e84:	4b48      	ldr	r3, [pc, #288]	; (8004fa8 <xTaskIncrementTick+0x14c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	603b      	str	r3, [r7, #0]
}
 8004ea0:	bf00      	nop
 8004ea2:	e7fe      	b.n	8004ea2 <xTaskIncrementTick+0x46>
 8004ea4:	4b40      	ldr	r3, [pc, #256]	; (8004fa8 <xTaskIncrementTick+0x14c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	4b40      	ldr	r3, [pc, #256]	; (8004fac <xTaskIncrementTick+0x150>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a3e      	ldr	r2, [pc, #248]	; (8004fa8 <xTaskIncrementTick+0x14c>)
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	4a3e      	ldr	r2, [pc, #248]	; (8004fac <xTaskIncrementTick+0x150>)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	4b3d      	ldr	r3, [pc, #244]	; (8004fb0 <xTaskIncrementTick+0x154>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	4a3c      	ldr	r2, [pc, #240]	; (8004fb0 <xTaskIncrementTick+0x154>)
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	f000 faa9 	bl	8005418 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ec6:	4b3b      	ldr	r3, [pc, #236]	; (8004fb4 <xTaskIncrementTick+0x158>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d348      	bcc.n	8004f62 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ed0:	4b35      	ldr	r3, [pc, #212]	; (8004fa8 <xTaskIncrementTick+0x14c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d104      	bne.n	8004ee4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eda:	4b36      	ldr	r3, [pc, #216]	; (8004fb4 <xTaskIncrementTick+0x158>)
 8004edc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee0:	601a      	str	r2, [r3, #0]
					break;
 8004ee2:	e03e      	b.n	8004f62 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ee4:	4b30      	ldr	r3, [pc, #192]	; (8004fa8 <xTaskIncrementTick+0x14c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d203      	bcs.n	8004f04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004efc:	4a2d      	ldr	r2, [pc, #180]	; (8004fb4 <xTaskIncrementTick+0x158>)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f02:	e02e      	b.n	8004f62 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	3304      	adds	r3, #4
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fe ff11 	bl	8003d30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d004      	beq.n	8004f20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	3318      	adds	r3, #24
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fe ff08 	bl	8003d30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	2201      	movs	r2, #1
 8004f26:	409a      	lsls	r2, r3
 8004f28:	4b23      	ldr	r3, [pc, #140]	; (8004fb8 <xTaskIncrementTick+0x15c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	4a22      	ldr	r2, [pc, #136]	; (8004fb8 <xTaskIncrementTick+0x15c>)
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f36:	4613      	mov	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4a1f      	ldr	r2, [pc, #124]	; (8004fbc <xTaskIncrementTick+0x160>)
 8004f40:	441a      	add	r2, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	3304      	adds	r3, #4
 8004f46:	4619      	mov	r1, r3
 8004f48:	4610      	mov	r0, r2
 8004f4a:	f7fe fe94 	bl	8003c76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f52:	4b1b      	ldr	r3, [pc, #108]	; (8004fc0 <xTaskIncrementTick+0x164>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d3b9      	bcc.n	8004ed0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f60:	e7b6      	b.n	8004ed0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f62:	4b17      	ldr	r3, [pc, #92]	; (8004fc0 <xTaskIncrementTick+0x164>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f68:	4914      	ldr	r1, [pc, #80]	; (8004fbc <xTaskIncrementTick+0x160>)
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d901      	bls.n	8004f7e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f7e:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <xTaskIncrementTick+0x168>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004f86:	2301      	movs	r3, #1
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	e004      	b.n	8004f96 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f8c:	4b0e      	ldr	r3, [pc, #56]	; (8004fc8 <xTaskIncrementTick+0x16c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3301      	adds	r3, #1
 8004f92:	4a0d      	ldr	r2, [pc, #52]	; (8004fc8 <xTaskIncrementTick+0x16c>)
 8004f94:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f96:	697b      	ldr	r3, [r7, #20]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20000550 	.word	0x20000550
 8004fa4:	2000052c 	.word	0x2000052c
 8004fa8:	200004e0 	.word	0x200004e0
 8004fac:	200004e4 	.word	0x200004e4
 8004fb0:	20000540 	.word	0x20000540
 8004fb4:	20000548 	.word	0x20000548
 8004fb8:	20000530 	.word	0x20000530
 8004fbc:	2000042c 	.word	0x2000042c
 8004fc0:	20000428 	.word	0x20000428
 8004fc4:	2000053c 	.word	0x2000053c
 8004fc8:	20000538 	.word	0x20000538

08004fcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fd2:	4b29      	ldr	r3, [pc, #164]	; (8005078 <vTaskSwitchContext+0xac>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004fda:	4b28      	ldr	r3, [pc, #160]	; (800507c <vTaskSwitchContext+0xb0>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004fe0:	e044      	b.n	800506c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004fe2:	4b26      	ldr	r3, [pc, #152]	; (800507c <vTaskSwitchContext+0xb0>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fe8:	4b25      	ldr	r3, [pc, #148]	; (8005080 <vTaskSwitchContext+0xb4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	fab3 f383 	clz	r3, r3
 8004ff4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004ff6:	7afb      	ldrb	r3, [r7, #11]
 8004ff8:	f1c3 031f 	rsb	r3, r3, #31
 8004ffc:	617b      	str	r3, [r7, #20]
 8004ffe:	4921      	ldr	r1, [pc, #132]	; (8005084 <vTaskSwitchContext+0xb8>)
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4613      	mov	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	440b      	add	r3, r1
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10a      	bne.n	8005028 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	607b      	str	r3, [r7, #4]
}
 8005024:	bf00      	nop
 8005026:	e7fe      	b.n	8005026 <vTaskSwitchContext+0x5a>
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4613      	mov	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4a14      	ldr	r2, [pc, #80]	; (8005084 <vTaskSwitchContext+0xb8>)
 8005034:	4413      	add	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	605a      	str	r2, [r3, #4]
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	3308      	adds	r3, #8
 800504a:	429a      	cmp	r2, r3
 800504c:	d104      	bne.n	8005058 <vTaskSwitchContext+0x8c>
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	605a      	str	r2, [r3, #4]
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	4a0a      	ldr	r2, [pc, #40]	; (8005088 <vTaskSwitchContext+0xbc>)
 8005060:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005062:	4b09      	ldr	r3, [pc, #36]	; (8005088 <vTaskSwitchContext+0xbc>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	334c      	adds	r3, #76	; 0x4c
 8005068:	4a08      	ldr	r2, [pc, #32]	; (800508c <vTaskSwitchContext+0xc0>)
 800506a:	6013      	str	r3, [r2, #0]
}
 800506c:	bf00      	nop
 800506e:	371c      	adds	r7, #28
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	20000550 	.word	0x20000550
 800507c:	2000053c 	.word	0x2000053c
 8005080:	20000530 	.word	0x20000530
 8005084:	2000042c 	.word	0x2000042c
 8005088:	20000428 	.word	0x20000428
 800508c:	20000010 	.word	0x20000010

08005090 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10a      	bne.n	80050b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	60fb      	str	r3, [r7, #12]
}
 80050b2:	bf00      	nop
 80050b4:	e7fe      	b.n	80050b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050b6:	4b07      	ldr	r3, [pc, #28]	; (80050d4 <vTaskPlaceOnEventList+0x44>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3318      	adds	r3, #24
 80050bc:	4619      	mov	r1, r3
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7fe fdfd 	bl	8003cbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050c4:	2101      	movs	r1, #1
 80050c6:	6838      	ldr	r0, [r7, #0]
 80050c8:	f000 fb82 	bl	80057d0 <prvAddCurrentTaskToDelayedList>
}
 80050cc:	bf00      	nop
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20000428 	.word	0x20000428

080050d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10a      	bne.n	8005104 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	60fb      	str	r3, [r7, #12]
}
 8005100:	bf00      	nop
 8005102:	e7fe      	b.n	8005102 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	3318      	adds	r3, #24
 8005108:	4618      	mov	r0, r3
 800510a:	f7fe fe11 	bl	8003d30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800510e:	4b1d      	ldr	r3, [pc, #116]	; (8005184 <xTaskRemoveFromEventList+0xac>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d11c      	bne.n	8005150 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	3304      	adds	r3, #4
 800511a:	4618      	mov	r0, r3
 800511c:	f7fe fe08 	bl	8003d30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	2201      	movs	r2, #1
 8005126:	409a      	lsls	r2, r3
 8005128:	4b17      	ldr	r3, [pc, #92]	; (8005188 <xTaskRemoveFromEventList+0xb0>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4313      	orrs	r3, r2
 800512e:	4a16      	ldr	r2, [pc, #88]	; (8005188 <xTaskRemoveFromEventList+0xb0>)
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005136:	4613      	mov	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4a13      	ldr	r2, [pc, #76]	; (800518c <xTaskRemoveFromEventList+0xb4>)
 8005140:	441a      	add	r2, r3
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	3304      	adds	r3, #4
 8005146:	4619      	mov	r1, r3
 8005148:	4610      	mov	r0, r2
 800514a:	f7fe fd94 	bl	8003c76 <vListInsertEnd>
 800514e:	e005      	b.n	800515c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	3318      	adds	r3, #24
 8005154:	4619      	mov	r1, r3
 8005156:	480e      	ldr	r0, [pc, #56]	; (8005190 <xTaskRemoveFromEventList+0xb8>)
 8005158:	f7fe fd8d 	bl	8003c76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005160:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <xTaskRemoveFromEventList+0xbc>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	429a      	cmp	r2, r3
 8005168:	d905      	bls.n	8005176 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800516a:	2301      	movs	r3, #1
 800516c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800516e:	4b0a      	ldr	r3, [pc, #40]	; (8005198 <xTaskRemoveFromEventList+0xc0>)
 8005170:	2201      	movs	r2, #1
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	e001      	b.n	800517a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800517a:	697b      	ldr	r3, [r7, #20]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	20000550 	.word	0x20000550
 8005188:	20000530 	.word	0x20000530
 800518c:	2000042c 	.word	0x2000042c
 8005190:	200004e8 	.word	0x200004e8
 8005194:	20000428 	.word	0x20000428
 8005198:	2000053c 	.word	0x2000053c

0800519c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051a4:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <vTaskInternalSetTimeOutState+0x24>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051ac:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <vTaskInternalSetTimeOutState+0x28>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	605a      	str	r2, [r3, #4]
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	20000540 	.word	0x20000540
 80051c4:	2000052c 	.word	0x2000052c

080051c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	613b      	str	r3, [r7, #16]
}
 80051ea:	bf00      	nop
 80051ec:	e7fe      	b.n	80051ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10a      	bne.n	800520a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	60fb      	str	r3, [r7, #12]
}
 8005206:	bf00      	nop
 8005208:	e7fe      	b.n	8005208 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800520a:	f000 fc73 	bl	8005af4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800520e:	4b1d      	ldr	r3, [pc, #116]	; (8005284 <xTaskCheckForTimeOut+0xbc>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005226:	d102      	bne.n	800522e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005228:	2300      	movs	r3, #0
 800522a:	61fb      	str	r3, [r7, #28]
 800522c:	e023      	b.n	8005276 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	4b15      	ldr	r3, [pc, #84]	; (8005288 <xTaskCheckForTimeOut+0xc0>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d007      	beq.n	800524a <xTaskCheckForTimeOut+0x82>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	429a      	cmp	r2, r3
 8005242:	d302      	bcc.n	800524a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005244:	2301      	movs	r3, #1
 8005246:	61fb      	str	r3, [r7, #28]
 8005248:	e015      	b.n	8005276 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	429a      	cmp	r2, r3
 8005252:	d20b      	bcs.n	800526c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	1ad2      	subs	r2, r2, r3
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7ff ff9b 	bl	800519c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	e004      	b.n	8005276 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005272:	2301      	movs	r3, #1
 8005274:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005276:	f000 fc6d 	bl	8005b54 <vPortExitCritical>

	return xReturn;
 800527a:	69fb      	ldr	r3, [r7, #28]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3720      	adds	r7, #32
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	2000052c 	.word	0x2000052c
 8005288:	20000540 	.word	0x20000540

0800528c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005290:	4b03      	ldr	r3, [pc, #12]	; (80052a0 <vTaskMissedYield+0x14>)
 8005292:	2201      	movs	r2, #1
 8005294:	601a      	str	r2, [r3, #0]
}
 8005296:	bf00      	nop
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	2000053c 	.word	0x2000053c

080052a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052ac:	f000 f852 	bl	8005354 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052b0:	4b06      	ldr	r3, [pc, #24]	; (80052cc <prvIdleTask+0x28>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d9f9      	bls.n	80052ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <prvIdleTask+0x2c>)
 80052ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052c8:	e7f0      	b.n	80052ac <prvIdleTask+0x8>
 80052ca:	bf00      	nop
 80052cc:	2000042c 	.word	0x2000042c
 80052d0:	e000ed04 	.word	0xe000ed04

080052d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052da:	2300      	movs	r3, #0
 80052dc:	607b      	str	r3, [r7, #4]
 80052de:	e00c      	b.n	80052fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4a12      	ldr	r2, [pc, #72]	; (8005334 <prvInitialiseTaskLists+0x60>)
 80052ec:	4413      	add	r3, r2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fe fc94 	bl	8003c1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3301      	adds	r3, #1
 80052f8:	607b      	str	r3, [r7, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b06      	cmp	r3, #6
 80052fe:	d9ef      	bls.n	80052e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005300:	480d      	ldr	r0, [pc, #52]	; (8005338 <prvInitialiseTaskLists+0x64>)
 8005302:	f7fe fc8b 	bl	8003c1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005306:	480d      	ldr	r0, [pc, #52]	; (800533c <prvInitialiseTaskLists+0x68>)
 8005308:	f7fe fc88 	bl	8003c1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800530c:	480c      	ldr	r0, [pc, #48]	; (8005340 <prvInitialiseTaskLists+0x6c>)
 800530e:	f7fe fc85 	bl	8003c1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005312:	480c      	ldr	r0, [pc, #48]	; (8005344 <prvInitialiseTaskLists+0x70>)
 8005314:	f7fe fc82 	bl	8003c1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005318:	480b      	ldr	r0, [pc, #44]	; (8005348 <prvInitialiseTaskLists+0x74>)
 800531a:	f7fe fc7f 	bl	8003c1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800531e:	4b0b      	ldr	r3, [pc, #44]	; (800534c <prvInitialiseTaskLists+0x78>)
 8005320:	4a05      	ldr	r2, [pc, #20]	; (8005338 <prvInitialiseTaskLists+0x64>)
 8005322:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005324:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <prvInitialiseTaskLists+0x7c>)
 8005326:	4a05      	ldr	r2, [pc, #20]	; (800533c <prvInitialiseTaskLists+0x68>)
 8005328:	601a      	str	r2, [r3, #0]
}
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	2000042c 	.word	0x2000042c
 8005338:	200004b8 	.word	0x200004b8
 800533c:	200004cc 	.word	0x200004cc
 8005340:	200004e8 	.word	0x200004e8
 8005344:	200004fc 	.word	0x200004fc
 8005348:	20000514 	.word	0x20000514
 800534c:	200004e0 	.word	0x200004e0
 8005350:	200004e4 	.word	0x200004e4

08005354 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800535a:	e019      	b.n	8005390 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800535c:	f000 fbca 	bl	8005af4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005360:	4b10      	ldr	r3, [pc, #64]	; (80053a4 <prvCheckTasksWaitingTermination+0x50>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3304      	adds	r3, #4
 800536c:	4618      	mov	r0, r3
 800536e:	f7fe fcdf 	bl	8003d30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005372:	4b0d      	ldr	r3, [pc, #52]	; (80053a8 <prvCheckTasksWaitingTermination+0x54>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3b01      	subs	r3, #1
 8005378:	4a0b      	ldr	r2, [pc, #44]	; (80053a8 <prvCheckTasksWaitingTermination+0x54>)
 800537a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800537c:	4b0b      	ldr	r3, [pc, #44]	; (80053ac <prvCheckTasksWaitingTermination+0x58>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3b01      	subs	r3, #1
 8005382:	4a0a      	ldr	r2, [pc, #40]	; (80053ac <prvCheckTasksWaitingTermination+0x58>)
 8005384:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005386:	f000 fbe5 	bl	8005b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f810 	bl	80053b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005390:	4b06      	ldr	r3, [pc, #24]	; (80053ac <prvCheckTasksWaitingTermination+0x58>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1e1      	bne.n	800535c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005398:	bf00      	nop
 800539a:	bf00      	nop
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	200004fc 	.word	0x200004fc
 80053a8:	20000528 	.word	0x20000528
 80053ac:	20000510 	.word	0x20000510

080053b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	334c      	adds	r3, #76	; 0x4c
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 feef 	bl	80061a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d108      	bne.n	80053de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 fd7d 	bl	8005ed0 <vPortFree>
				vPortFree( pxTCB );
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fd7a 	bl	8005ed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053dc:	e018      	b.n	8005410 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d103      	bne.n	80053f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fd71 	bl	8005ed0 <vPortFree>
	}
 80053ee:	e00f      	b.n	8005410 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d00a      	beq.n	8005410 <prvDeleteTCB+0x60>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	60fb      	str	r3, [r7, #12]
}
 800540c:	bf00      	nop
 800540e:	e7fe      	b.n	800540e <prvDeleteTCB+0x5e>
	}
 8005410:	bf00      	nop
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800541e:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <prvResetNextTaskUnblockTime+0x38>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d104      	bne.n	8005432 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <prvResetNextTaskUnblockTime+0x3c>)
 800542a:	f04f 32ff 	mov.w	r2, #4294967295
 800542e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005430:	e008      	b.n	8005444 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005432:	4b07      	ldr	r3, [pc, #28]	; (8005450 <prvResetNextTaskUnblockTime+0x38>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	4a04      	ldr	r2, [pc, #16]	; (8005454 <prvResetNextTaskUnblockTime+0x3c>)
 8005442:	6013      	str	r3, [r2, #0]
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	200004e0 	.word	0x200004e0
 8005454:	20000548 	.word	0x20000548

08005458 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800545e:	4b0b      	ldr	r3, [pc, #44]	; (800548c <xTaskGetSchedulerState+0x34>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d102      	bne.n	800546c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005466:	2301      	movs	r3, #1
 8005468:	607b      	str	r3, [r7, #4]
 800546a:	e008      	b.n	800547e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800546c:	4b08      	ldr	r3, [pc, #32]	; (8005490 <xTaskGetSchedulerState+0x38>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d102      	bne.n	800547a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005474:	2302      	movs	r3, #2
 8005476:	607b      	str	r3, [r7, #4]
 8005478:	e001      	b.n	800547e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800547a:	2300      	movs	r3, #0
 800547c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800547e:	687b      	ldr	r3, [r7, #4]
	}
 8005480:	4618      	mov	r0, r3
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	20000534 	.word	0x20000534
 8005490:	20000550 	.word	0x20000550

08005494 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80054a0:	2300      	movs	r3, #0
 80054a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d05e      	beq.n	8005568 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ae:	4b31      	ldr	r3, [pc, #196]	; (8005574 <xTaskPriorityInherit+0xe0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d24e      	bcs.n	8005556 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	db06      	blt.n	80054ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054c0:	4b2c      	ldr	r3, [pc, #176]	; (8005574 <xTaskPriorityInherit+0xe0>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c6:	f1c3 0207 	rsb	r2, r3, #7
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	6959      	ldr	r1, [r3, #20]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d6:	4613      	mov	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4a26      	ldr	r2, [pc, #152]	; (8005578 <xTaskPriorityInherit+0xe4>)
 80054e0:	4413      	add	r3, r2
 80054e2:	4299      	cmp	r1, r3
 80054e4:	d12f      	bne.n	8005546 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	3304      	adds	r3, #4
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe fc20 	bl	8003d30 <uxListRemove>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10a      	bne.n	800550c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fa:	2201      	movs	r2, #1
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	43da      	mvns	r2, r3
 8005502:	4b1e      	ldr	r3, [pc, #120]	; (800557c <xTaskPriorityInherit+0xe8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4013      	ands	r3, r2
 8005508:	4a1c      	ldr	r2, [pc, #112]	; (800557c <xTaskPriorityInherit+0xe8>)
 800550a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800550c:	4b19      	ldr	r3, [pc, #100]	; (8005574 <xTaskPriorityInherit+0xe0>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551a:	2201      	movs	r2, #1
 800551c:	409a      	lsls	r2, r3
 800551e:	4b17      	ldr	r3, [pc, #92]	; (800557c <xTaskPriorityInherit+0xe8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4313      	orrs	r3, r2
 8005524:	4a15      	ldr	r2, [pc, #84]	; (800557c <xTaskPriorityInherit+0xe8>)
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4a10      	ldr	r2, [pc, #64]	; (8005578 <xTaskPriorityInherit+0xe4>)
 8005536:	441a      	add	r2, r3
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	3304      	adds	r3, #4
 800553c:	4619      	mov	r1, r3
 800553e:	4610      	mov	r0, r2
 8005540:	f7fe fb99 	bl	8003c76 <vListInsertEnd>
 8005544:	e004      	b.n	8005550 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005546:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <xTaskPriorityInherit+0xe0>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005550:	2301      	movs	r3, #1
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	e008      	b.n	8005568 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800555a:	4b06      	ldr	r3, [pc, #24]	; (8005574 <xTaskPriorityInherit+0xe0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	429a      	cmp	r2, r3
 8005562:	d201      	bcs.n	8005568 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005564:	2301      	movs	r3, #1
 8005566:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005568:	68fb      	ldr	r3, [r7, #12]
	}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000428 	.word	0x20000428
 8005578:	2000042c 	.word	0x2000042c
 800557c:	20000530 	.word	0x20000530

08005580 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800558c:	2300      	movs	r3, #0
 800558e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d06e      	beq.n	8005674 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005596:	4b3a      	ldr	r3, [pc, #232]	; (8005680 <xTaskPriorityDisinherit+0x100>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	429a      	cmp	r2, r3
 800559e:	d00a      	beq.n	80055b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80055a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	60fb      	str	r3, [r7, #12]
}
 80055b2:	bf00      	nop
 80055b4:	e7fe      	b.n	80055b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10a      	bne.n	80055d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	60bb      	str	r3, [r7, #8]
}
 80055d0:	bf00      	nop
 80055d2:	e7fe      	b.n	80055d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d8:	1e5a      	subs	r2, r3, #1
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d044      	beq.n	8005674 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d140      	bne.n	8005674 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	3304      	adds	r3, #4
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fe fb9a 	bl	8003d30 <uxListRemove>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d115      	bne.n	800562e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005606:	491f      	ldr	r1, [pc, #124]	; (8005684 <xTaskPriorityDisinherit+0x104>)
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <xTaskPriorityDisinherit+0xae>
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	2201      	movs	r2, #1
 800561e:	fa02 f303 	lsl.w	r3, r2, r3
 8005622:	43da      	mvns	r2, r3
 8005624:	4b18      	ldr	r3, [pc, #96]	; (8005688 <xTaskPriorityDisinherit+0x108>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4013      	ands	r3, r2
 800562a:	4a17      	ldr	r2, [pc, #92]	; (8005688 <xTaskPriorityDisinherit+0x108>)
 800562c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563a:	f1c3 0207 	rsb	r2, r3, #7
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005646:	2201      	movs	r2, #1
 8005648:	409a      	lsls	r2, r3
 800564a:	4b0f      	ldr	r3, [pc, #60]	; (8005688 <xTaskPriorityDisinherit+0x108>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4313      	orrs	r3, r2
 8005650:	4a0d      	ldr	r2, [pc, #52]	; (8005688 <xTaskPriorityDisinherit+0x108>)
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4a08      	ldr	r2, [pc, #32]	; (8005684 <xTaskPriorityDisinherit+0x104>)
 8005662:	441a      	add	r2, r3
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	3304      	adds	r3, #4
 8005668:	4619      	mov	r1, r3
 800566a:	4610      	mov	r0, r2
 800566c:	f7fe fb03 	bl	8003c76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005670:	2301      	movs	r3, #1
 8005672:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005674:	697b      	ldr	r3, [r7, #20]
	}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000428 	.word	0x20000428
 8005684:	2000042c 	.word	0x2000042c
 8005688:	20000530 	.word	0x20000530

0800568c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800569a:	2301      	movs	r3, #1
 800569c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d077      	beq.n	8005794 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10a      	bne.n	80056c2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	60fb      	str	r3, [r7, #12]
}
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d902      	bls.n	80056d2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	61fb      	str	r3, [r7, #28]
 80056d0:	e002      	b.n	80056d8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	69fa      	ldr	r2, [r7, #28]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d058      	beq.n	8005794 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d153      	bne.n	8005794 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80056ec:	4b2b      	ldr	r3, [pc, #172]	; (800579c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d10a      	bne.n	800570c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	60bb      	str	r3, [r7, #8]
}
 8005708:	bf00      	nop
 800570a:	e7fe      	b.n	800570a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	2b00      	cmp	r3, #0
 800571e:	db04      	blt.n	800572a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	f1c3 0207 	rsb	r2, r3, #7
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	6959      	ldr	r1, [r3, #20]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	4613      	mov	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4a19      	ldr	r2, [pc, #100]	; (80057a0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800573a:	4413      	add	r3, r2
 800573c:	4299      	cmp	r1, r3
 800573e:	d129      	bne.n	8005794 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	3304      	adds	r3, #4
 8005744:	4618      	mov	r0, r3
 8005746:	f7fe faf3 	bl	8003d30 <uxListRemove>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10a      	bne.n	8005766 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	2201      	movs	r2, #1
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	43da      	mvns	r2, r3
 800575c:	4b11      	ldr	r3, [pc, #68]	; (80057a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4013      	ands	r3, r2
 8005762:	4a10      	ldr	r2, [pc, #64]	; (80057a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005764:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	2201      	movs	r2, #1
 800576c:	409a      	lsls	r2, r3
 800576e:	4b0d      	ldr	r3, [pc, #52]	; (80057a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4313      	orrs	r3, r2
 8005774:	4a0b      	ldr	r2, [pc, #44]	; (80057a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4a06      	ldr	r2, [pc, #24]	; (80057a0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005786:	441a      	add	r2, r3
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	3304      	adds	r3, #4
 800578c:	4619      	mov	r1, r3
 800578e:	4610      	mov	r0, r2
 8005790:	f7fe fa71 	bl	8003c76 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005794:	bf00      	nop
 8005796:	3720      	adds	r7, #32
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	20000428 	.word	0x20000428
 80057a0:	2000042c 	.word	0x2000042c
 80057a4:	20000530 	.word	0x20000530

080057a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80057ac:	4b07      	ldr	r3, [pc, #28]	; (80057cc <pvTaskIncrementMutexHeldCount+0x24>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d004      	beq.n	80057be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80057b4:	4b05      	ldr	r3, [pc, #20]	; (80057cc <pvTaskIncrementMutexHeldCount+0x24>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057ba:	3201      	adds	r2, #1
 80057bc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80057be:	4b03      	ldr	r3, [pc, #12]	; (80057cc <pvTaskIncrementMutexHeldCount+0x24>)
 80057c0:	681b      	ldr	r3, [r3, #0]
	}
 80057c2:	4618      	mov	r0, r3
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	20000428 	.word	0x20000428

080057d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057da:	4b29      	ldr	r3, [pc, #164]	; (8005880 <prvAddCurrentTaskToDelayedList+0xb0>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057e0:	4b28      	ldr	r3, [pc, #160]	; (8005884 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3304      	adds	r3, #4
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe faa2 	bl	8003d30 <uxListRemove>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10b      	bne.n	800580a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80057f2:	4b24      	ldr	r3, [pc, #144]	; (8005884 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f8:	2201      	movs	r2, #1
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	43da      	mvns	r2, r3
 8005800:	4b21      	ldr	r3, [pc, #132]	; (8005888 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4013      	ands	r3, r2
 8005806:	4a20      	ldr	r2, [pc, #128]	; (8005888 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005808:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005810:	d10a      	bne.n	8005828 <prvAddCurrentTaskToDelayedList+0x58>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d007      	beq.n	8005828 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005818:	4b1a      	ldr	r3, [pc, #104]	; (8005884 <prvAddCurrentTaskToDelayedList+0xb4>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3304      	adds	r3, #4
 800581e:	4619      	mov	r1, r3
 8005820:	481a      	ldr	r0, [pc, #104]	; (800588c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005822:	f7fe fa28 	bl	8003c76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005826:	e026      	b.n	8005876 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4413      	add	r3, r2
 800582e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005830:	4b14      	ldr	r3, [pc, #80]	; (8005884 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	429a      	cmp	r2, r3
 800583e:	d209      	bcs.n	8005854 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005840:	4b13      	ldr	r3, [pc, #76]	; (8005890 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	4b0f      	ldr	r3, [pc, #60]	; (8005884 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3304      	adds	r3, #4
 800584a:	4619      	mov	r1, r3
 800584c:	4610      	mov	r0, r2
 800584e:	f7fe fa36 	bl	8003cbe <vListInsert>
}
 8005852:	e010      	b.n	8005876 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005854:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <prvAddCurrentTaskToDelayedList+0xb4>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3304      	adds	r3, #4
 800585e:	4619      	mov	r1, r3
 8005860:	4610      	mov	r0, r2
 8005862:	f7fe fa2c 	bl	8003cbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005866:	4b0c      	ldr	r3, [pc, #48]	; (8005898 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	429a      	cmp	r2, r3
 800586e:	d202      	bcs.n	8005876 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005870:	4a09      	ldr	r2, [pc, #36]	; (8005898 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	6013      	str	r3, [r2, #0]
}
 8005876:	bf00      	nop
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	2000052c 	.word	0x2000052c
 8005884:	20000428 	.word	0x20000428
 8005888:	20000530 	.word	0x20000530
 800588c:	20000514 	.word	0x20000514
 8005890:	200004e4 	.word	0x200004e4
 8005894:	200004e0 	.word	0x200004e0
 8005898:	20000548 	.word	0x20000548

0800589c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	3b04      	subs	r3, #4
 80058ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3b04      	subs	r3, #4
 80058ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f023 0201 	bic.w	r2, r3, #1
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	3b04      	subs	r3, #4
 80058ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058cc:	4a0c      	ldr	r2, [pc, #48]	; (8005900 <pxPortInitialiseStack+0x64>)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3b14      	subs	r3, #20
 80058d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3b04      	subs	r3, #4
 80058e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f06f 0202 	mvn.w	r2, #2
 80058ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	3b20      	subs	r3, #32
 80058f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058f2:	68fb      	ldr	r3, [r7, #12]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	08005905 	.word	0x08005905

08005904 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800590e:	4b12      	ldr	r3, [pc, #72]	; (8005958 <prvTaskExitError+0x54>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	d00a      	beq.n	800592e <prvTaskExitError+0x2a>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	60fb      	str	r3, [r7, #12]
}
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <prvTaskExitError+0x28>
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	60bb      	str	r3, [r7, #8]
}
 8005940:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005942:	bf00      	nop
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0fc      	beq.n	8005944 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800594a:	bf00      	nop
 800594c:	bf00      	nop
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	2000000c 	.word	0x2000000c
 800595c:	00000000 	.word	0x00000000

08005960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005960:	4b07      	ldr	r3, [pc, #28]	; (8005980 <pxCurrentTCBConst2>)
 8005962:	6819      	ldr	r1, [r3, #0]
 8005964:	6808      	ldr	r0, [r1, #0]
 8005966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596a:	f380 8809 	msr	PSP, r0
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f04f 0000 	mov.w	r0, #0
 8005976:	f380 8811 	msr	BASEPRI, r0
 800597a:	4770      	bx	lr
 800597c:	f3af 8000 	nop.w

08005980 <pxCurrentTCBConst2>:
 8005980:	20000428 	.word	0x20000428
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop

08005988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005988:	4808      	ldr	r0, [pc, #32]	; (80059ac <prvPortStartFirstTask+0x24>)
 800598a:	6800      	ldr	r0, [r0, #0]
 800598c:	6800      	ldr	r0, [r0, #0]
 800598e:	f380 8808 	msr	MSP, r0
 8005992:	f04f 0000 	mov.w	r0, #0
 8005996:	f380 8814 	msr	CONTROL, r0
 800599a:	b662      	cpsie	i
 800599c:	b661      	cpsie	f
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	df00      	svc	0
 80059a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80059aa:	bf00      	nop
 80059ac:	e000ed08 	.word	0xe000ed08

080059b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059b6:	4b46      	ldr	r3, [pc, #280]	; (8005ad0 <xPortStartScheduler+0x120>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a46      	ldr	r2, [pc, #280]	; (8005ad4 <xPortStartScheduler+0x124>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d10a      	bne.n	80059d6 <xPortStartScheduler+0x26>
	__asm volatile
 80059c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	613b      	str	r3, [r7, #16]
}
 80059d2:	bf00      	nop
 80059d4:	e7fe      	b.n	80059d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80059d6:	4b3e      	ldr	r3, [pc, #248]	; (8005ad0 <xPortStartScheduler+0x120>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a3f      	ldr	r2, [pc, #252]	; (8005ad8 <xPortStartScheduler+0x128>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d10a      	bne.n	80059f6 <xPortStartScheduler+0x46>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	60fb      	str	r3, [r7, #12]
}
 80059f2:	bf00      	nop
 80059f4:	e7fe      	b.n	80059f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059f6:	4b39      	ldr	r3, [pc, #228]	; (8005adc <xPortStartScheduler+0x12c>)
 80059f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	22ff      	movs	r2, #255	; 0xff
 8005a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a10:	78fb      	ldrb	r3, [r7, #3]
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	4b31      	ldr	r3, [pc, #196]	; (8005ae0 <xPortStartScheduler+0x130>)
 8005a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a1e:	4b31      	ldr	r3, [pc, #196]	; (8005ae4 <xPortStartScheduler+0x134>)
 8005a20:	2207      	movs	r2, #7
 8005a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a24:	e009      	b.n	8005a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005a26:	4b2f      	ldr	r3, [pc, #188]	; (8005ae4 <xPortStartScheduler+0x134>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	4a2d      	ldr	r2, [pc, #180]	; (8005ae4 <xPortStartScheduler+0x134>)
 8005a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a30:	78fb      	ldrb	r3, [r7, #3]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a42:	2b80      	cmp	r3, #128	; 0x80
 8005a44:	d0ef      	beq.n	8005a26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a46:	4b27      	ldr	r3, [pc, #156]	; (8005ae4 <xPortStartScheduler+0x134>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f1c3 0307 	rsb	r3, r3, #7
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d00a      	beq.n	8005a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	60bb      	str	r3, [r7, #8]
}
 8005a64:	bf00      	nop
 8005a66:	e7fe      	b.n	8005a66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a68:	4b1e      	ldr	r3, [pc, #120]	; (8005ae4 <xPortStartScheduler+0x134>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	021b      	lsls	r3, r3, #8
 8005a6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ae4 <xPortStartScheduler+0x134>)
 8005a70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a72:	4b1c      	ldr	r3, [pc, #112]	; (8005ae4 <xPortStartScheduler+0x134>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a7a:	4a1a      	ldr	r2, [pc, #104]	; (8005ae4 <xPortStartScheduler+0x134>)
 8005a7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a86:	4b18      	ldr	r3, [pc, #96]	; (8005ae8 <xPortStartScheduler+0x138>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a17      	ldr	r2, [pc, #92]	; (8005ae8 <xPortStartScheduler+0x138>)
 8005a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a92:	4b15      	ldr	r3, [pc, #84]	; (8005ae8 <xPortStartScheduler+0x138>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a14      	ldr	r2, [pc, #80]	; (8005ae8 <xPortStartScheduler+0x138>)
 8005a98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a9e:	f000 f8dd 	bl	8005c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005aa2:	4b12      	ldr	r3, [pc, #72]	; (8005aec <xPortStartScheduler+0x13c>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005aa8:	f000 f8fc 	bl	8005ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005aac:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <xPortStartScheduler+0x140>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a0f      	ldr	r2, [pc, #60]	; (8005af0 <xPortStartScheduler+0x140>)
 8005ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ab8:	f7ff ff66 	bl	8005988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005abc:	f7ff fa86 	bl	8004fcc <vTaskSwitchContext>
	prvTaskExitError();
 8005ac0:	f7ff ff20 	bl	8005904 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	e000ed00 	.word	0xe000ed00
 8005ad4:	410fc271 	.word	0x410fc271
 8005ad8:	410fc270 	.word	0x410fc270
 8005adc:	e000e400 	.word	0xe000e400
 8005ae0:	20000554 	.word	0x20000554
 8005ae4:	20000558 	.word	0x20000558
 8005ae8:	e000ed20 	.word	0xe000ed20
 8005aec:	2000000c 	.word	0x2000000c
 8005af0:	e000ef34 	.word	0xe000ef34

08005af4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	607b      	str	r3, [r7, #4]
}
 8005b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b0e:	4b0f      	ldr	r3, [pc, #60]	; (8005b4c <vPortEnterCritical+0x58>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3301      	adds	r3, #1
 8005b14:	4a0d      	ldr	r2, [pc, #52]	; (8005b4c <vPortEnterCritical+0x58>)
 8005b16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b18:	4b0c      	ldr	r3, [pc, #48]	; (8005b4c <vPortEnterCritical+0x58>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d10f      	bne.n	8005b40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b20:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <vPortEnterCritical+0x5c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <vPortEnterCritical+0x4c>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	603b      	str	r3, [r7, #0]
}
 8005b3c:	bf00      	nop
 8005b3e:	e7fe      	b.n	8005b3e <vPortEnterCritical+0x4a>
	}
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	2000000c 	.word	0x2000000c
 8005b50:	e000ed04 	.word	0xe000ed04

08005b54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b5a:	4b12      	ldr	r3, [pc, #72]	; (8005ba4 <vPortExitCritical+0x50>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10a      	bne.n	8005b78 <vPortExitCritical+0x24>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	607b      	str	r3, [r7, #4]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005b78:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <vPortExitCritical+0x50>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	4a09      	ldr	r2, [pc, #36]	; (8005ba4 <vPortExitCritical+0x50>)
 8005b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b82:	4b08      	ldr	r3, [pc, #32]	; (8005ba4 <vPortExitCritical+0x50>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d105      	bne.n	8005b96 <vPortExitCritical+0x42>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	f383 8811 	msr	BASEPRI, r3
}
 8005b94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	2000000c 	.word	0x2000000c
	...

08005bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005bb0:	f3ef 8009 	mrs	r0, PSP
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	4b15      	ldr	r3, [pc, #84]	; (8005c10 <pxCurrentTCBConst>)
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	f01e 0f10 	tst.w	lr, #16
 8005bc0:	bf08      	it	eq
 8005bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bca:	6010      	str	r0, [r2, #0]
 8005bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005bd4:	f380 8811 	msr	BASEPRI, r0
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f7ff f9f4 	bl	8004fcc <vTaskSwitchContext>
 8005be4:	f04f 0000 	mov.w	r0, #0
 8005be8:	f380 8811 	msr	BASEPRI, r0
 8005bec:	bc09      	pop	{r0, r3}
 8005bee:	6819      	ldr	r1, [r3, #0]
 8005bf0:	6808      	ldr	r0, [r1, #0]
 8005bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf6:	f01e 0f10 	tst.w	lr, #16
 8005bfa:	bf08      	it	eq
 8005bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c00:	f380 8809 	msr	PSP, r0
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	f3af 8000 	nop.w

08005c10 <pxCurrentTCBConst>:
 8005c10:	20000428 	.word	0x20000428
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c14:	bf00      	nop
 8005c16:	bf00      	nop

08005c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	607b      	str	r3, [r7, #4]
}
 8005c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c32:	f7ff f913 	bl	8004e5c <xTaskIncrementTick>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c3c:	4b06      	ldr	r3, [pc, #24]	; (8005c58 <SysTick_Handler+0x40>)
 8005c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	2300      	movs	r3, #0
 8005c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	f383 8811 	msr	BASEPRI, r3
}
 8005c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c50:	bf00      	nop
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	e000ed04 	.word	0xe000ed04

08005c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c60:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <vPortSetupTimerInterrupt+0x34>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c66:	4b0b      	ldr	r3, [pc, #44]	; (8005c94 <vPortSetupTimerInterrupt+0x38>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c6c:	4b0a      	ldr	r3, [pc, #40]	; (8005c98 <vPortSetupTimerInterrupt+0x3c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a0a      	ldr	r2, [pc, #40]	; (8005c9c <vPortSetupTimerInterrupt+0x40>)
 8005c72:	fba2 2303 	umull	r2, r3, r2, r3
 8005c76:	099b      	lsrs	r3, r3, #6
 8005c78:	4a09      	ldr	r2, [pc, #36]	; (8005ca0 <vPortSetupTimerInterrupt+0x44>)
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c7e:	4b04      	ldr	r3, [pc, #16]	; (8005c90 <vPortSetupTimerInterrupt+0x34>)
 8005c80:	2207      	movs	r2, #7
 8005c82:	601a      	str	r2, [r3, #0]
}
 8005c84:	bf00      	nop
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	e000e010 	.word	0xe000e010
 8005c94:	e000e018 	.word	0xe000e018
 8005c98:	20000000 	.word	0x20000000
 8005c9c:	10624dd3 	.word	0x10624dd3
 8005ca0:	e000e014 	.word	0xe000e014

08005ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005cb4 <vPortEnableVFP+0x10>
 8005ca8:	6801      	ldr	r1, [r0, #0]
 8005caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005cae:	6001      	str	r1, [r0, #0]
 8005cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005cb2:	bf00      	nop
 8005cb4:	e000ed88 	.word	0xe000ed88

08005cb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005cbe:	f3ef 8305 	mrs	r3, IPSR
 8005cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b0f      	cmp	r3, #15
 8005cc8:	d914      	bls.n	8005cf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005cca:	4a17      	ldr	r2, [pc, #92]	; (8005d28 <vPortValidateInterruptPriority+0x70>)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4413      	add	r3, r2
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005cd4:	4b15      	ldr	r3, [pc, #84]	; (8005d2c <vPortValidateInterruptPriority+0x74>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	7afa      	ldrb	r2, [r7, #11]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d20a      	bcs.n	8005cf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	607b      	str	r3, [r7, #4]
}
 8005cf0:	bf00      	nop
 8005cf2:	e7fe      	b.n	8005cf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005cf4:	4b0e      	ldr	r3, [pc, #56]	; (8005d30 <vPortValidateInterruptPriority+0x78>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005cfc:	4b0d      	ldr	r3, [pc, #52]	; (8005d34 <vPortValidateInterruptPriority+0x7c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d90a      	bls.n	8005d1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	603b      	str	r3, [r7, #0]
}
 8005d16:	bf00      	nop
 8005d18:	e7fe      	b.n	8005d18 <vPortValidateInterruptPriority+0x60>
	}
 8005d1a:	bf00      	nop
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	e000e3f0 	.word	0xe000e3f0
 8005d2c:	20000554 	.word	0x20000554
 8005d30:	e000ed0c 	.word	0xe000ed0c
 8005d34:	20000558 	.word	0x20000558

08005d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08a      	sub	sp, #40	; 0x28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d44:	f7fe ffe0 	bl	8004d08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d48:	4b5b      	ldr	r3, [pc, #364]	; (8005eb8 <pvPortMalloc+0x180>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d50:	f000 f920 	bl	8005f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d54:	4b59      	ldr	r3, [pc, #356]	; (8005ebc <pvPortMalloc+0x184>)
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f040 8093 	bne.w	8005e88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d01d      	beq.n	8005da4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005d68:	2208      	movs	r2, #8
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d014      	beq.n	8005da4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f023 0307 	bic.w	r3, r3, #7
 8005d80:	3308      	adds	r3, #8
 8005d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <pvPortMalloc+0x6c>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	617b      	str	r3, [r7, #20]
}
 8005da0:	bf00      	nop
 8005da2:	e7fe      	b.n	8005da2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d06e      	beq.n	8005e88 <pvPortMalloc+0x150>
 8005daa:	4b45      	ldr	r3, [pc, #276]	; (8005ec0 <pvPortMalloc+0x188>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d869      	bhi.n	8005e88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005db4:	4b43      	ldr	r3, [pc, #268]	; (8005ec4 <pvPortMalloc+0x18c>)
 8005db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005db8:	4b42      	ldr	r3, [pc, #264]	; (8005ec4 <pvPortMalloc+0x18c>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dbe:	e004      	b.n	8005dca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d903      	bls.n	8005ddc <pvPortMalloc+0xa4>
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f1      	bne.n	8005dc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ddc:	4b36      	ldr	r3, [pc, #216]	; (8005eb8 <pvPortMalloc+0x180>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d050      	beq.n	8005e88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2208      	movs	r2, #8
 8005dec:	4413      	add	r3, r2
 8005dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	1ad2      	subs	r2, r2, r3
 8005e00:	2308      	movs	r3, #8
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d91f      	bls.n	8005e48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <pvPortMalloc+0xf8>
	__asm volatile
 8005e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	613b      	str	r3, [r7, #16]
}
 8005e2c:	bf00      	nop
 8005e2e:	e7fe      	b.n	8005e2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	1ad2      	subs	r2, r2, r3
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e42:	69b8      	ldr	r0, [r7, #24]
 8005e44:	f000 f908 	bl	8006058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e48:	4b1d      	ldr	r3, [pc, #116]	; (8005ec0 <pvPortMalloc+0x188>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	4a1b      	ldr	r2, [pc, #108]	; (8005ec0 <pvPortMalloc+0x188>)
 8005e54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e56:	4b1a      	ldr	r3, [pc, #104]	; (8005ec0 <pvPortMalloc+0x188>)
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	4b1b      	ldr	r3, [pc, #108]	; (8005ec8 <pvPortMalloc+0x190>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d203      	bcs.n	8005e6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e62:	4b17      	ldr	r3, [pc, #92]	; (8005ec0 <pvPortMalloc+0x188>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a18      	ldr	r2, [pc, #96]	; (8005ec8 <pvPortMalloc+0x190>)
 8005e68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	4b13      	ldr	r3, [pc, #76]	; (8005ebc <pvPortMalloc+0x184>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	431a      	orrs	r2, r3
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e7e:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <pvPortMalloc+0x194>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3301      	adds	r3, #1
 8005e84:	4a11      	ldr	r2, [pc, #68]	; (8005ecc <pvPortMalloc+0x194>)
 8005e86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e88:	f7fe ff4c 	bl	8004d24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <pvPortMalloc+0x174>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	60fb      	str	r3, [r7, #12]
}
 8005ea8:	bf00      	nop
 8005eaa:	e7fe      	b.n	8005eaa <pvPortMalloc+0x172>
	return pvReturn;
 8005eac:	69fb      	ldr	r3, [r7, #28]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3728      	adds	r7, #40	; 0x28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	2000111c 	.word	0x2000111c
 8005ebc:	20001130 	.word	0x20001130
 8005ec0:	20001120 	.word	0x20001120
 8005ec4:	20001114 	.word	0x20001114
 8005ec8:	20001124 	.word	0x20001124
 8005ecc:	20001128 	.word	0x20001128

08005ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d04d      	beq.n	8005f7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ee2:	2308      	movs	r3, #8
 8005ee4:	425b      	negs	r3, r3
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	4413      	add	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	4b24      	ldr	r3, [pc, #144]	; (8005f88 <vPortFree+0xb8>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10a      	bne.n	8005f14 <vPortFree+0x44>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	60fb      	str	r3, [r7, #12]
}
 8005f10:	bf00      	nop
 8005f12:	e7fe      	b.n	8005f12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <vPortFree+0x62>
	__asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	60bb      	str	r3, [r7, #8]
}
 8005f2e:	bf00      	nop
 8005f30:	e7fe      	b.n	8005f30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	4b14      	ldr	r3, [pc, #80]	; (8005f88 <vPortFree+0xb8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01e      	beq.n	8005f7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d11a      	bne.n	8005f7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	4b0e      	ldr	r3, [pc, #56]	; (8005f88 <vPortFree+0xb8>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	43db      	mvns	r3, r3
 8005f52:	401a      	ands	r2, r3
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f58:	f7fe fed6 	bl	8004d08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <vPortFree+0xbc>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4413      	add	r3, r2
 8005f66:	4a09      	ldr	r2, [pc, #36]	; (8005f8c <vPortFree+0xbc>)
 8005f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f6a:	6938      	ldr	r0, [r7, #16]
 8005f6c:	f000 f874 	bl	8006058 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f70:	4b07      	ldr	r3, [pc, #28]	; (8005f90 <vPortFree+0xc0>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3301      	adds	r3, #1
 8005f76:	4a06      	ldr	r2, [pc, #24]	; (8005f90 <vPortFree+0xc0>)
 8005f78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f7a:	f7fe fed3 	bl	8004d24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f7e:	bf00      	nop
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20001130 	.word	0x20001130
 8005f8c:	20001120 	.word	0x20001120
 8005f90:	2000112c 	.word	0x2000112c

08005f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f9a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005fa0:	4b27      	ldr	r3, [pc, #156]	; (8006040 <prvHeapInit+0xac>)
 8005fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00c      	beq.n	8005fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3307      	adds	r3, #7
 8005fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 0307 	bic.w	r3, r3, #7
 8005fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	4a1f      	ldr	r2, [pc, #124]	; (8006040 <prvHeapInit+0xac>)
 8005fc4:	4413      	add	r3, r2
 8005fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fcc:	4a1d      	ldr	r2, [pc, #116]	; (8006044 <prvHeapInit+0xb0>)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005fd2:	4b1c      	ldr	r3, [pc, #112]	; (8006044 <prvHeapInit+0xb0>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	4413      	add	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005fe0:	2208      	movs	r2, #8
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	1a9b      	subs	r3, r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0307 	bic.w	r3, r3, #7
 8005fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4a15      	ldr	r2, [pc, #84]	; (8006048 <prvHeapInit+0xb4>)
 8005ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ff6:	4b14      	ldr	r3, [pc, #80]	; (8006048 <prvHeapInit+0xb4>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ffe:	4b12      	ldr	r3, [pc, #72]	; (8006048 <prvHeapInit+0xb4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	1ad2      	subs	r2, r2, r3
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006014:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <prvHeapInit+0xb4>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	4a0a      	ldr	r2, [pc, #40]	; (800604c <prvHeapInit+0xb8>)
 8006022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	4a09      	ldr	r2, [pc, #36]	; (8006050 <prvHeapInit+0xbc>)
 800602a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800602c:	4b09      	ldr	r3, [pc, #36]	; (8006054 <prvHeapInit+0xc0>)
 800602e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006032:	601a      	str	r2, [r3, #0]
}
 8006034:	bf00      	nop
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	2000055c 	.word	0x2000055c
 8006044:	20001114 	.word	0x20001114
 8006048:	2000111c 	.word	0x2000111c
 800604c:	20001124 	.word	0x20001124
 8006050:	20001120 	.word	0x20001120
 8006054:	20001130 	.word	0x20001130

08006058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006060:	4b28      	ldr	r3, [pc, #160]	; (8006104 <prvInsertBlockIntoFreeList+0xac>)
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	e002      	b.n	800606c <prvInsertBlockIntoFreeList+0x14>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	429a      	cmp	r2, r3
 8006074:	d8f7      	bhi.n	8006066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	4413      	add	r3, r2
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	429a      	cmp	r2, r3
 8006086:	d108      	bne.n	800609a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	441a      	add	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	441a      	add	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d118      	bne.n	80060e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4b15      	ldr	r3, [pc, #84]	; (8006108 <prvInsertBlockIntoFreeList+0xb0>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d00d      	beq.n	80060d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	441a      	add	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	e008      	b.n	80060e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060d6:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <prvInsertBlockIntoFreeList+0xb0>)
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	e003      	b.n	80060e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d002      	beq.n	80060f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	20001114 	.word	0x20001114
 8006108:	2000111c 	.word	0x2000111c

0800610c <__libc_init_array>:
 800610c:	b570      	push	{r4, r5, r6, lr}
 800610e:	4d0d      	ldr	r5, [pc, #52]	; (8006144 <__libc_init_array+0x38>)
 8006110:	4c0d      	ldr	r4, [pc, #52]	; (8006148 <__libc_init_array+0x3c>)
 8006112:	1b64      	subs	r4, r4, r5
 8006114:	10a4      	asrs	r4, r4, #2
 8006116:	2600      	movs	r6, #0
 8006118:	42a6      	cmp	r6, r4
 800611a:	d109      	bne.n	8006130 <__libc_init_array+0x24>
 800611c:	4d0b      	ldr	r5, [pc, #44]	; (800614c <__libc_init_array+0x40>)
 800611e:	4c0c      	ldr	r4, [pc, #48]	; (8006150 <__libc_init_array+0x44>)
 8006120:	f000 f8f2 	bl	8006308 <_init>
 8006124:	1b64      	subs	r4, r4, r5
 8006126:	10a4      	asrs	r4, r4, #2
 8006128:	2600      	movs	r6, #0
 800612a:	42a6      	cmp	r6, r4
 800612c:	d105      	bne.n	800613a <__libc_init_array+0x2e>
 800612e:	bd70      	pop	{r4, r5, r6, pc}
 8006130:	f855 3b04 	ldr.w	r3, [r5], #4
 8006134:	4798      	blx	r3
 8006136:	3601      	adds	r6, #1
 8006138:	e7ee      	b.n	8006118 <__libc_init_array+0xc>
 800613a:	f855 3b04 	ldr.w	r3, [r5], #4
 800613e:	4798      	blx	r3
 8006140:	3601      	adds	r6, #1
 8006142:	e7f2      	b.n	800612a <__libc_init_array+0x1e>
 8006144:	08006548 	.word	0x08006548
 8006148:	08006548 	.word	0x08006548
 800614c:	08006548 	.word	0x08006548
 8006150:	0800654c 	.word	0x0800654c

08006154 <__retarget_lock_acquire_recursive>:
 8006154:	4770      	bx	lr

08006156 <__retarget_lock_release_recursive>:
 8006156:	4770      	bx	lr

08006158 <memcpy>:
 8006158:	440a      	add	r2, r1
 800615a:	4291      	cmp	r1, r2
 800615c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006160:	d100      	bne.n	8006164 <memcpy+0xc>
 8006162:	4770      	bx	lr
 8006164:	b510      	push	{r4, lr}
 8006166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800616a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800616e:	4291      	cmp	r1, r2
 8006170:	d1f9      	bne.n	8006166 <memcpy+0xe>
 8006172:	bd10      	pop	{r4, pc}

08006174 <memset>:
 8006174:	4402      	add	r2, r0
 8006176:	4603      	mov	r3, r0
 8006178:	4293      	cmp	r3, r2
 800617a:	d100      	bne.n	800617e <memset+0xa>
 800617c:	4770      	bx	lr
 800617e:	f803 1b01 	strb.w	r1, [r3], #1
 8006182:	e7f9      	b.n	8006178 <memset+0x4>

08006184 <cleanup_glue>:
 8006184:	b538      	push	{r3, r4, r5, lr}
 8006186:	460c      	mov	r4, r1
 8006188:	6809      	ldr	r1, [r1, #0]
 800618a:	4605      	mov	r5, r0
 800618c:	b109      	cbz	r1, 8006192 <cleanup_glue+0xe>
 800618e:	f7ff fff9 	bl	8006184 <cleanup_glue>
 8006192:	4621      	mov	r1, r4
 8006194:	4628      	mov	r0, r5
 8006196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800619a:	f000 b869 	b.w	8006270 <_free_r>
	...

080061a0 <_reclaim_reent>:
 80061a0:	4b2c      	ldr	r3, [pc, #176]	; (8006254 <_reclaim_reent+0xb4>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4283      	cmp	r3, r0
 80061a6:	b570      	push	{r4, r5, r6, lr}
 80061a8:	4604      	mov	r4, r0
 80061aa:	d051      	beq.n	8006250 <_reclaim_reent+0xb0>
 80061ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80061ae:	b143      	cbz	r3, 80061c2 <_reclaim_reent+0x22>
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d14a      	bne.n	800624c <_reclaim_reent+0xac>
 80061b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061b8:	6819      	ldr	r1, [r3, #0]
 80061ba:	b111      	cbz	r1, 80061c2 <_reclaim_reent+0x22>
 80061bc:	4620      	mov	r0, r4
 80061be:	f000 f857 	bl	8006270 <_free_r>
 80061c2:	6961      	ldr	r1, [r4, #20]
 80061c4:	b111      	cbz	r1, 80061cc <_reclaim_reent+0x2c>
 80061c6:	4620      	mov	r0, r4
 80061c8:	f000 f852 	bl	8006270 <_free_r>
 80061cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80061ce:	b111      	cbz	r1, 80061d6 <_reclaim_reent+0x36>
 80061d0:	4620      	mov	r0, r4
 80061d2:	f000 f84d 	bl	8006270 <_free_r>
 80061d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80061d8:	b111      	cbz	r1, 80061e0 <_reclaim_reent+0x40>
 80061da:	4620      	mov	r0, r4
 80061dc:	f000 f848 	bl	8006270 <_free_r>
 80061e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80061e2:	b111      	cbz	r1, 80061ea <_reclaim_reent+0x4a>
 80061e4:	4620      	mov	r0, r4
 80061e6:	f000 f843 	bl	8006270 <_free_r>
 80061ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80061ec:	b111      	cbz	r1, 80061f4 <_reclaim_reent+0x54>
 80061ee:	4620      	mov	r0, r4
 80061f0:	f000 f83e 	bl	8006270 <_free_r>
 80061f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80061f6:	b111      	cbz	r1, 80061fe <_reclaim_reent+0x5e>
 80061f8:	4620      	mov	r0, r4
 80061fa:	f000 f839 	bl	8006270 <_free_r>
 80061fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006200:	b111      	cbz	r1, 8006208 <_reclaim_reent+0x68>
 8006202:	4620      	mov	r0, r4
 8006204:	f000 f834 	bl	8006270 <_free_r>
 8006208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800620a:	b111      	cbz	r1, 8006212 <_reclaim_reent+0x72>
 800620c:	4620      	mov	r0, r4
 800620e:	f000 f82f 	bl	8006270 <_free_r>
 8006212:	69a3      	ldr	r3, [r4, #24]
 8006214:	b1e3      	cbz	r3, 8006250 <_reclaim_reent+0xb0>
 8006216:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006218:	4620      	mov	r0, r4
 800621a:	4798      	blx	r3
 800621c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800621e:	b1b9      	cbz	r1, 8006250 <_reclaim_reent+0xb0>
 8006220:	4620      	mov	r0, r4
 8006222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006226:	f7ff bfad 	b.w	8006184 <cleanup_glue>
 800622a:	5949      	ldr	r1, [r1, r5]
 800622c:	b941      	cbnz	r1, 8006240 <_reclaim_reent+0xa0>
 800622e:	3504      	adds	r5, #4
 8006230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006232:	2d80      	cmp	r5, #128	; 0x80
 8006234:	68d9      	ldr	r1, [r3, #12]
 8006236:	d1f8      	bne.n	800622a <_reclaim_reent+0x8a>
 8006238:	4620      	mov	r0, r4
 800623a:	f000 f819 	bl	8006270 <_free_r>
 800623e:	e7ba      	b.n	80061b6 <_reclaim_reent+0x16>
 8006240:	680e      	ldr	r6, [r1, #0]
 8006242:	4620      	mov	r0, r4
 8006244:	f000 f814 	bl	8006270 <_free_r>
 8006248:	4631      	mov	r1, r6
 800624a:	e7ef      	b.n	800622c <_reclaim_reent+0x8c>
 800624c:	2500      	movs	r5, #0
 800624e:	e7ef      	b.n	8006230 <_reclaim_reent+0x90>
 8006250:	bd70      	pop	{r4, r5, r6, pc}
 8006252:	bf00      	nop
 8006254:	20000010 	.word	0x20000010

08006258 <__malloc_lock>:
 8006258:	4801      	ldr	r0, [pc, #4]	; (8006260 <__malloc_lock+0x8>)
 800625a:	f7ff bf7b 	b.w	8006154 <__retarget_lock_acquire_recursive>
 800625e:	bf00      	nop
 8006260:	20001134 	.word	0x20001134

08006264 <__malloc_unlock>:
 8006264:	4801      	ldr	r0, [pc, #4]	; (800626c <__malloc_unlock+0x8>)
 8006266:	f7ff bf76 	b.w	8006156 <__retarget_lock_release_recursive>
 800626a:	bf00      	nop
 800626c:	20001134 	.word	0x20001134

08006270 <_free_r>:
 8006270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006272:	2900      	cmp	r1, #0
 8006274:	d044      	beq.n	8006300 <_free_r+0x90>
 8006276:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800627a:	9001      	str	r0, [sp, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	f1a1 0404 	sub.w	r4, r1, #4
 8006282:	bfb8      	it	lt
 8006284:	18e4      	addlt	r4, r4, r3
 8006286:	f7ff ffe7 	bl	8006258 <__malloc_lock>
 800628a:	4a1e      	ldr	r2, [pc, #120]	; (8006304 <_free_r+0x94>)
 800628c:	9801      	ldr	r0, [sp, #4]
 800628e:	6813      	ldr	r3, [r2, #0]
 8006290:	b933      	cbnz	r3, 80062a0 <_free_r+0x30>
 8006292:	6063      	str	r3, [r4, #4]
 8006294:	6014      	str	r4, [r2, #0]
 8006296:	b003      	add	sp, #12
 8006298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800629c:	f7ff bfe2 	b.w	8006264 <__malloc_unlock>
 80062a0:	42a3      	cmp	r3, r4
 80062a2:	d908      	bls.n	80062b6 <_free_r+0x46>
 80062a4:	6825      	ldr	r5, [r4, #0]
 80062a6:	1961      	adds	r1, r4, r5
 80062a8:	428b      	cmp	r3, r1
 80062aa:	bf01      	itttt	eq
 80062ac:	6819      	ldreq	r1, [r3, #0]
 80062ae:	685b      	ldreq	r3, [r3, #4]
 80062b0:	1949      	addeq	r1, r1, r5
 80062b2:	6021      	streq	r1, [r4, #0]
 80062b4:	e7ed      	b.n	8006292 <_free_r+0x22>
 80062b6:	461a      	mov	r2, r3
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	b10b      	cbz	r3, 80062c0 <_free_r+0x50>
 80062bc:	42a3      	cmp	r3, r4
 80062be:	d9fa      	bls.n	80062b6 <_free_r+0x46>
 80062c0:	6811      	ldr	r1, [r2, #0]
 80062c2:	1855      	adds	r5, r2, r1
 80062c4:	42a5      	cmp	r5, r4
 80062c6:	d10b      	bne.n	80062e0 <_free_r+0x70>
 80062c8:	6824      	ldr	r4, [r4, #0]
 80062ca:	4421      	add	r1, r4
 80062cc:	1854      	adds	r4, r2, r1
 80062ce:	42a3      	cmp	r3, r4
 80062d0:	6011      	str	r1, [r2, #0]
 80062d2:	d1e0      	bne.n	8006296 <_free_r+0x26>
 80062d4:	681c      	ldr	r4, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	6053      	str	r3, [r2, #4]
 80062da:	4421      	add	r1, r4
 80062dc:	6011      	str	r1, [r2, #0]
 80062de:	e7da      	b.n	8006296 <_free_r+0x26>
 80062e0:	d902      	bls.n	80062e8 <_free_r+0x78>
 80062e2:	230c      	movs	r3, #12
 80062e4:	6003      	str	r3, [r0, #0]
 80062e6:	e7d6      	b.n	8006296 <_free_r+0x26>
 80062e8:	6825      	ldr	r5, [r4, #0]
 80062ea:	1961      	adds	r1, r4, r5
 80062ec:	428b      	cmp	r3, r1
 80062ee:	bf04      	itt	eq
 80062f0:	6819      	ldreq	r1, [r3, #0]
 80062f2:	685b      	ldreq	r3, [r3, #4]
 80062f4:	6063      	str	r3, [r4, #4]
 80062f6:	bf04      	itt	eq
 80062f8:	1949      	addeq	r1, r1, r5
 80062fa:	6021      	streq	r1, [r4, #0]
 80062fc:	6054      	str	r4, [r2, #4]
 80062fe:	e7ca      	b.n	8006296 <_free_r+0x26>
 8006300:	b003      	add	sp, #12
 8006302:	bd30      	pop	{r4, r5, pc}
 8006304:	20001138 	.word	0x20001138

08006308 <_init>:
 8006308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630a:	bf00      	nop
 800630c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800630e:	bc08      	pop	{r3}
 8006310:	469e      	mov	lr, r3
 8006312:	4770      	bx	lr

08006314 <_fini>:
 8006314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006316:	bf00      	nop
 8006318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800631a:	bc08      	pop	{r3}
 800631c:	469e      	mov	lr, r3
 800631e:	4770      	bx	lr
